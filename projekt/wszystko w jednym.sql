-- Generated by Oracle SQL Developer Data Modeler 4.2.0.917
-- Autor: Krzysztof Szarafiñski
-- nr albumu: 155441
-- Data: 12.01.2017



CREATE TABLE adres (
    id              INTEGER
        CONSTRAINT nnc_adres_id NOT NULL,
    ulica           VARCHAR2(50)
        CONSTRAINT nnc_adres_ulica NOT NULL,
    miasto          VARCHAR2(20)
        CONSTRAINT nnc_adres_miasto NOT NULL,
    nr_domu         NUMBER
        CONSTRAINT nnc_adres_nr_domu NOT NULL,
    nr_mieszkania   NUMBER
);

COMMENT ON TABLE adres IS 'tablica adres dla klientów i oddzialow firmy';

ALTER TABLE adres ADD CONSTRAINT adres_mieszkanie CHECK (
    nr_mieszkania > 0
);

ALTER TABLE adres ADD CONSTRAINT adres_dom CHECK (
    nr_domu > 0
);

ALTER TABLE adres ADD CONSTRAINT adres_pk PRIMARY KEY ( id );

CREATE TABLE klasa_wyposazenia (
    id      INTEGER NOT NULL,
    nazwa   VARCHAR2(20) DEFAULT 'S' NOT NULL,
    opis    VARCHAR2(100) DEFAULT 'Small' NOT NULL
);

COMMENT ON TABLE klasa_wyposazenia IS 'klasa s,m,l lub xl,sportowy';

ALTER TABLE klasa_wyposazenia ADD CONSTRAINT klasa_wyposazenia_pk PRIMARY KEY ( id );

ALTER TABLE klasa_wyposazenia ADD CONSTRAINT klasa_wyposazenia_nazwa_un UNIQUE ( nazwa );

CREATE TABLE klient (
    id         INTEGER NOT NULL,
    plec       CHAR(1) NOT NULL,
    imie       VARCHAR2(20) NOT NULL,
    nazwisko   VARCHAR2(50) NOT NULL,
    email      VARCHAR2(50),
    adres_id   INTEGER
        CONSTRAINT nn_adres_fk NOT NULL
);

COMMENT ON TABLE klient IS 'informacje o kliencie';

ALTER TABLE klient ADD CONSTRAINT klient_ck_1 CHECK (
    plec IN (
        'K','k','M','m'
    )
);

ALTER TABLE klient ADD CONSTRAINT klient_ck_2 CHECK (
    email LIKE '%@%.%'
);

ALTER TABLE klient ADD CONSTRAINT klient_pk PRIMARY KEY ( id );

CREATE TABLE kolor (
    id       INTEGER
        CONSTRAINT nnc_kolor_id NOT NULL,
    nazwa    VARCHAR2(50)
        CONSTRAINT nnc_kolor_nazwa NOT NULL,
    odcien   VARCHAR2(50)
        CONSTRAINT nnc_kolor_odcien NOT NULL,
    cena     NUMBER(8,2)
        CONSTRAINT nnc_kolor_cena NOT NULL
);

COMMENT ON TABLE kolor IS 'informacje o kolorze dostepnym dla samochodu';

COMMENT ON COLUMN kolor.odcien IS 'marketingowa nazwa koloru';

ALTER TABLE kolor ADD CONSTRAINT kolor_ck CHECK (
    cena > 0
);

ALTER TABLE kolor ADD CONSTRAINT kolor_pk PRIMARY KEY ( id );

CREATE TABLE marka (
    id      INTEGER NOT NULL,
    nazwa   VARCHAR2(20) NOT NULL,
    kraj    VARCHAR2(20) NOT NULL
);

COMMENT ON TABLE marka IS 'marki produkujace modele samochodow';

ALTER TABLE marka ADD CONSTRAINT marka_pk PRIMARY KEY ( id );

ALTER TABLE marka ADD CONSTRAINT marka_nazwa_un UNIQUE ( nazwa );

CREATE TABLE model (
    id                     INTEGER
        CONSTRAINT nnc_model_model_id NOT NULL,
    nazwa                  VARCHAR2(20)
        CONSTRAINT nnc_model_nazwa NOT NULL,
    marka_id               INTEGER
        CONSTRAINT nnc_model_marka_id NOT NULL,
    rok_produkcji          INTEGER
        CONSTRAINT nnc_model_rok_produkcji NOT NULL,
    klasa_wyposazenia_id   INTEGER DEFAULT 1
        CONSTRAINT nnc_model_klasa_modelu_id NOT NULL,
    cena                   NUMBER(8,2) NOT NULL,
    liczba_drzwi           NUMBER(1) NOT NULL
);

COMMENT ON TABLE model IS 'modele samochodow';

ALTER TABLE model ADD CONSTRAINT model_ck CHECK (
    rok_produkcji > 1900
);

ALTER TABLE model ADD CONSTRAINT model_ckv1 CHECK (
    cena > 0
);

ALTER TABLE model ADD CONSTRAINT model_ck_3 CHECK (
    liczba_drzwi IN (
        2,3,4,5
    )
);

ALTER TABLE model ADD CONSTRAINT model_pk PRIMARY KEY ( id );

CREATE TABLE oddzial (
    id       INTEGER NOT NULL,
    nazwa    VARCHAR2(20) NOT NULL,
    email    VARCHAR2(50) NOT NULL,
    miasto   VARCHAR2(20) NOT NULL
);

COMMENT ON TABLE oddzial IS 'informacje o oddziale sprzedawcy';

ALTER TABLE oddzial ADD CONSTRAINT oddzial_ck_1 CHECK (
    email LIKE '%@%.%'
);

ALTER TABLE oddzial ADD CONSTRAINT oddzial_pk PRIMARY KEY ( id );

ALTER TABLE oddzial ADD CONSTRAINT oddzial_nazwa_un UNIQUE ( nazwa );

CREATE TABLE pakiet_dodatkowy (
    id      INTEGER
        CONSTRAINT nnc_modyfikacja_auta_id NOT NULL,
    nazwa   VARCHAR2(20)
        CONSTRAINT nnc_modyfikacja_auta_nazwa NOT NULL,
    opis    VARCHAR2(300),
    cena    NUMBER(8,2)
        CONSTRAINT nnc_modyfikacja_auta_cena NOT NULL
);

COMMENT ON TABLE pakiet_dodatkowy IS 'informacje o pakeitach dodatkowych dostepnych do dokupienia';

ALTER TABLE pakiet_dodatkowy ADD CONSTRAINT modyfikacja_auta_ck CHECK (
    cena > 0
);

ALTER TABLE pakiet_dodatkowy ADD CONSTRAINT pakiet_dodatkowy_pk PRIMARY KEY ( id );

ALTER TABLE pakiet_dodatkowy ADD CONSTRAINT pakiet_dodatkowy_nazwa_un UNIQUE ( nazwa );

CREATE TABLE pakiet_podstawowy (
    wyposazenie_id         INTEGER NOT NULL,
    klasa_wyposazenia_id   INTEGER NOT NULL
);

COMMENT ON TABLE pakiet_podstawowy IS 'pakiet podstawowy wyposazenia modelu ';

ALTER TABLE pakiet_podstawowy ADD CONSTRAINT pakiet_podstawowy_pk PRIMARY KEY ( wyposazenie_id,klasa_wyposazenia_id );

CREATE TABLE platnosc (
    id                    INTEGER
        CONSTRAINT nnc_platnosc_platnosc_id NOT NULL,
    data_dokonania        DATE DEFAULT SYSDATE
        CONSTRAINT nnc_platnosc_data_dokonania NOT NULL,
    kwota                 NUMBER(8,2)
        CONSTRAINT nnc_platnosc_kwota NOT NULL,
    uwagi_dodatkowe       VARCHAR2(100),
    status_platnosci_id   INTEGER DEFAULT 1
        CONSTRAINT nn_status_platnosci_id NOT NULL,
    rodzaj_platnosci_id   INTEGER DEFAULT 1
        CONSTRAINT nn_rodzaj_platnosci_id NOT NULL,
    klient_id             INTEGER
        CONSTRAINT nnc_platnosc_klient_id NOT NULL,
    zamowienie_id         INTEGER
        CONSTRAINT nn_zamowienie_fk NOT NULL
);

COMMENT ON TABLE platnosc IS 'informacje o platnosciach';

ALTER TABLE platnosc ADD CONSTRAINT platnosc_pk PRIMARY KEY ( id );

CREATE TABLE rodzaj_platnosci (
    id      INTEGER NOT NULL,
    nazwa   VARCHAR2(20) NOT NULL
);

COMMENT ON TABLE rodzaj_platnosci IS 'informacje o rodzaju platnosci: karta,gotowka,przelew,kredyt';

ALTER TABLE rodzaj_platnosci ADD CONSTRAINT rodzaj_platnosci_pk PRIMARY KEY ( id );

ALTER TABLE rodzaj_platnosci ADD CONSTRAINT rodzaj_platnosci_nazwa_un UNIQUE ( nazwa );

CREATE TABLE samochod (
    id                    INTEGER
        CONSTRAINT nnc_samochod_id NOT NULL,
    nr_vin                VARCHAR2(20)
        CONSTRAINT nnc_samochod_nr_vin NOT NULL,
    przejechany_dystans   NUMBER DEFAULT 2 NOT NULL,
    zamowienie_id         INTEGER,
    model_id              INTEGER
        CONSTRAINT nnc_samochod_model_id NOT NULL,
    silnik_id             INTEGER DEFAULT 1
        CONSTRAINT nnc_samochod_silnik_id NOT NULL,
    kolor_id              INTEGER DEFAULT 1 NOT NULL
);

COMMENT ON TABLE samochod IS 'informacje o samochodach';

ALTER TABLE samochod ADD CONSTRAINT samochod_ck CHECK (
    przejechany_dystans >= 0
);

ALTER TABLE samochod ADD CONSTRAINT samochod_pk PRIMARY KEY ( id );

CREATE TABLE silnik (
    id          INTEGER
        CONSTRAINT nnc_silnik_id NOT NULL,
    typ         VARCHAR2(20) DEFAULT 'BENZYNA'
        CONSTRAINT nnc_silnik_typ NOT NULL,
    pojemnosc   NUMBER
        CONSTRAINT nnc_silnik_pojemnosc NOT NULL,
    cena        NUMBER(8,2)
        CONSTRAINT nnc_silnik_cena NOT NULL
);

COMMENT ON TABLE silnik IS 'dostepne modele silnikow';

ALTER TABLE silnik ADD CONSTRAINT silnik_ck CHECK (
    cena > 0
);

ALTER TABLE silnik ADD CONSTRAINT silnik_ck_2 CHECK (
    lower(typ) IN (
        'benzyna','diesel','hybryda'
    )
);

ALTER TABLE silnik ADD CONSTRAINT silnik_pk PRIMARY KEY ( id );

CREATE TABLE sprzedawca (
    id              INTEGER NOT NULL,
    imie            VARCHAR2(20) NOT NULL,
    nazwisko        VARCHAR2(50) NOT NULL,
    email           VARCHAR2(50) DEFAULT 'pracownicy@firma.pl' NOT NULL,
    oddzial_id      INTEGER DEFAULT 1
        CONSTRAINT nn_oddzial NOT NULL,
    stanowisko_id   INTEGER DEFAULT 1 NOT NULL,
    pensja          NUMBER NOT NULL
);

COMMENT ON TABLE sprzedawca IS 'informacje o sprzedawcy ';

ALTER TABLE sprzedawca ADD CONSTRAINT sprzedawca_ck CHECK (
    pensja > 0
);

ALTER TABLE sprzedawca ADD CONSTRAINT sprzedawca_ck_2 CHECK (
    email LIKE '%@%.%'
);

ALTER TABLE sprzedawca ADD CONSTRAINT sprzedawca_pk PRIMARY KEY ( id );

CREATE TABLE stanowisko (
    id      INTEGER NOT NULL,
    nazwa   VARCHAR2(20) NOT NULL
);

COMMENT ON TABLE stanowisko IS 'stanowisko pracownika';

ALTER TABLE stanowisko ADD CONSTRAINT stanowisko_pk PRIMARY KEY ( id );

ALTER TABLE stanowisko ADD CONSTRAINT stanowisko_nazwa_un UNIQUE ( nazwa );

CREATE TABLE status_platnosci (
    id      INTEGER NOT NULL,
    nazwa   VARCHAR2(20) NOT NULL
);

COMMENT ON TABLE status_platnosci IS 'informacje czy platnosc zostala zaksiegowana,nadplata,do zwrotu';

ALTER TABLE status_platnosci ADD CONSTRAINT status_platnosci_pk PRIMARY KEY ( id );

ALTER TABLE status_platnosci ADD CONSTRAINT status_platnosci_nazwa_un UNIQUE ( nazwa );

CREATE TABLE status_zamowienia (
    id      INTEGER NOT NULL,
    nazwa   VARCHAR2(20) NOT NULL
);

COMMENT ON TABLE status_zamowienia IS 'informacja czy zamowienie jest w trakcie realizacji,do obioru lub odebrane';

ALTER TABLE status_zamowienia ADD CONSTRAINT status_zamowienia_pk PRIMARY KEY ( id );

ALTER TABLE status_zamowienia ADD CONSTRAINT status_zamowienia_nazwa_un UNIQUE ( nazwa );

CREATE TABLE ubezpieczenie (
    id                  INTEGER
        CONSTRAINT nnc_ubezpieczenie_id NOT NULL,
    cena                NUMBER(8,2)
        CONSTRAINT nnc_ubezpieczenie_cena NOT NULL,
    data_zawarcia       DATE DEFAULT SYSDATE
        CONSTRAINT nnc_data_zawarcia NOT NULL,
    poczatek            DATE DEFAULT SYSDATE
        CONSTRAINT nnc_ubezpieczenie_poczatek NOT NULL,
    koniec              DATE
        CONSTRAINT nnc_ubezpieczenie_koniec NOT NULL,
    ubezpieczyciel_id   INTEGER
        CONSTRAINT nnc_ubezpieczyciel_id NOT NULL
);

COMMENT ON TABLE ubezpieczenie IS 'informacje o ubezpieczeniu';

ALTER TABLE ubezpieczenie ADD CONSTRAINT ubezpieczenie_ck CHECK (
    cena > 0
);

ALTER TABLE ubezpieczenie ADD CONSTRAINT ubezpieczenie_ckv22 CHECK (
    poczatek >= data_zawarcia
);

ALTER TABLE ubezpieczenie ADD CONSTRAINT ubezpieczenie_ckv32 CHECK (
    koniec <= add_months(poczatek,12)
);

ALTER TABLE ubezpieczenie ADD CONSTRAINT ubezpieczenie_pk PRIMARY KEY ( id );

CREATE TABLE ubezpieczyciel (
    id      INTEGER NOT NULL,
    nazwa   VARCHAR2(20) NOT NULL
);

COMMENT ON TABLE ubezpieczyciel IS 'informacje o ubezpieczycielu';

ALTER TABLE ubezpieczyciel ADD CONSTRAINT ubezpieczyciel_pk PRIMARY KEY ( id );

ALTER TABLE ubezpieczyciel ADD CONSTRAINT ubezpieczyciel_nazwa_un UNIQUE ( nazwa );

CREATE TABLE upust (
    id            INTEGER
        CONSTRAINT nnc_upust_id NOT NULL,
    nazwa         VARCHAR2(50)
        CONSTRAINT nnc_upust_nazwa NOT NULL,
    wysokosc      NUMBER
        CONSTRAINT nnc_upust_wysokosc NOT NULL,
    data_start    DATE
        CONSTRAINT nnc_upust_data_start NOT NULL,
    data_koniec   DATE
        CONSTRAINT nnc_upust_data_koniec NOT NULL,
    opis          VARCHAR2(100)
);

COMMENT ON TABLE upust IS 'inforamcje o upstach cenowych stsowanych przez oddzial';

ALTER TABLE upust ADD CONSTRAINT upust_ck CHECK (
        wysokosc >= 0
    AND
        wysokosc <= 100
);

ALTER TABLE upust ADD CONSTRAINT upust_ck_2 CHECK (
    data_koniec > data_start
);

ALTER TABLE upust ADD CONSTRAINT upust_pk PRIMARY KEY ( id );

CREATE TABLE upust_oddzialu (
    oddzial_id   INTEGER NOT NULL,
    upust_id     INTEGER NOT NULL
);

COMMENT ON TABLE upust_oddzialu IS 'tablica pokazuje wybrane upusty jakie posiada oddzial';

ALTER TABLE upust_oddzialu ADD CONSTRAINT upust_oddzialu_pk PRIMARY KEY ( oddzial_id,upust_id );

CREATE TABLE uslugi_dodatkowe (
    id      INTEGER
        CONSTRAINT nnc_uslugi_dodatkowe_id NOT NULL,
    nazwa   VARCHAR2(30)
        CONSTRAINT nnc_uslugi_dodatkowe_nazwa NOT NULL,
    cena    NUMBER(8,2)
        CONSTRAINT nnc_uslugi_dodatkowe_cena NOT NULL
);

COMMENT ON TABLE uslugi_dodatkowe IS 'informacje o uslugach dodatkowych: pakiet na myjnie,przechowywanie opon itp';

ALTER TABLE uslugi_dodatkowe ADD CONSTRAINT uslugi_dodatkowe_ck CHECK (
    cena > 0
);

ALTER TABLE uslugi_dodatkowe ADD CONSTRAINT uslugi_dodatkowe_pk PRIMARY KEY ( id );

CREATE TABLE wybrane_pakiety (
    samochod_id           INTEGER NOT NULL,
    pakiet_dodatkowy_id   INTEGER NOT NULL
);

COMMENT ON TABLE wybrane_pakiety IS 'informacja o wybranych pakietch dodatkowychd dla konkretnego samochodu';

ALTER TABLE wybrane_pakiety ADD CONSTRAINT relation_56_pk PRIMARY KEY ( samochod_id,pakiet_dodatkowy_id );

CREATE TABLE wybrane_uslugi (
    zamowienie_id         INTEGER NOT NULL,
    uslugi_dodatkowe_id   INTEGER NOT NULL
);

COMMENT ON TABLE wybrane_uslugi IS 'wybrane uslugi dodatkowe do zamowienia';

ALTER TABLE wybrane_uslugi ADD CONSTRAINT wybrane_dodatki_pk PRIMARY KEY ( zamowienie_id,uslugi_dodatkowe_id );

CREATE TABLE wyposazenie (
    id      INTEGER
        CONSTRAINT nnc_wyposazenie_id NOT NULL,
    nazwa   VARCHAR2(100)
        CONSTRAINT nnc_wyposazenie_nazwa NOT NULL
);

COMMENT ON TABLE wyposazenie IS 'wyposazenie samochodu zarowno podstawowe jak i dodatkowe';

ALTER TABLE wyposazenie ADD CONSTRAINT wyposazenie_pk PRIMARY KEY ( id );

CREATE TABLE zamowienie (
    id                     INTEGER
        CONSTRAINT nnc_zamowienie_zamowienie_id NOT NULL,
    nr_umowy               VARCHAR2(20)
        CONSTRAINT nnc_zamowienie_nr_umowy NOT NULL,
    data_zawarcia          DATE
        CONSTRAINT nnc_zamowienie_data_zlozenia NOT NULL,
    data_odbioru           DATE
        CONSTRAINT nnc_zamowienie_data_odbioru NOT NULL,
    klient_id              INTEGER
        CONSTRAINT nnc_zamowienie_klient_id NOT NULL,
    sprzedawca_id          INTEGER
        CONSTRAINT nnc_zamowienie_sprzedawca_id NOT NULL,
    status_zamowienia_id   INTEGER DEFAULT 1
        CONSTRAINT nn_status_zamowienia_fk NOT NULL,
    ubezpieczenie_id       INTEGER
        CONSTRAINT nn_ubezpieczenie_fk NOT NULL
);

COMMENT ON TABLE zamowienie IS 'informacje o zamowieniu skladanym przez klienta';

ALTER TABLE zamowienie ADD CONSTRAINT zamowienie_ck CHECK (
    data_odbioru >= data_zawarcia
);

ALTER TABLE zamowienie ADD CONSTRAINT zamowienie_ck_3 CHECK (
    nr_umowy LIKE '%/%/%'
);

ALTER TABLE zamowienie ADD CONSTRAINT zamowienie_pk PRIMARY KEY ( id );

ALTER TABLE klient ADD CONSTRAINT klient_adres_fk FOREIGN KEY ( adres_id )
    REFERENCES adres ( id );

ALTER TABLE model ADD CONSTRAINT model_klasa_wyposazenia_fk FOREIGN KEY ( klasa_wyposazenia_id )
    REFERENCES klasa_wyposazenia ( id );

ALTER TABLE model ADD CONSTRAINT model_marka_fk FOREIGN KEY ( marka_id )
    REFERENCES marka ( id );

ALTER TABLE wybrane_pakiety ADD CONSTRAINT pakiet_samochodu FOREIGN KEY ( samochod_id )
    REFERENCES samochod ( id )
        ON DELETE CASCADE;

ALTER TABLE platnosc ADD CONSTRAINT platnosc_klient_fk FOREIGN KEY ( klient_id )
    REFERENCES klient ( id );

ALTER TABLE platnosc ADD CONSTRAINT platnosc_rodzaj_platnosci_fk FOREIGN KEY ( rodzaj_platnosci_id )
    REFERENCES rodzaj_platnosci ( id );

ALTER TABLE platnosc ADD CONSTRAINT platnosc_status_platnosci_fk FOREIGN KEY ( status_platnosci_id )
    REFERENCES status_platnosci ( id );

ALTER TABLE platnosc ADD CONSTRAINT platnosc_zamowienie_fk FOREIGN KEY ( zamowienie_id )
    REFERENCES zamowienie ( id )
        ON DELETE CASCADE;

ALTER TABLE pakiet_podstawowy ADD CONSTRAINT podstawowe_wyposazenie_fk FOREIGN KEY ( wyposazenie_id )
    REFERENCES wyposazenie ( id )
        ON DELETE CASCADE;

ALTER TABLE pakiet_podstawowy ADD CONSTRAINT podstawowe_wyposazenie_fkv2 FOREIGN KEY ( klasa_wyposazenia_id )
    REFERENCES klasa_wyposazenia ( id )
        ON DELETE CASCADE;

ALTER TABLE samochod ADD CONSTRAINT samochod_kolor_fk FOREIGN KEY ( kolor_id )
    REFERENCES kolor ( id );

ALTER TABLE samochod ADD CONSTRAINT samochod_model_fk FOREIGN KEY ( model_id )
    REFERENCES model ( id );

ALTER TABLE samochod ADD CONSTRAINT samochod_silnik_fk FOREIGN KEY ( silnik_id )
    REFERENCES silnik ( id );

ALTER TABLE samochod ADD CONSTRAINT samochod_zamowienie_fk FOREIGN KEY ( zamowienie_id )
    REFERENCES zamowienie ( id );

ALTER TABLE sprzedawca ADD CONSTRAINT sprzedawca_oddzial_fk FOREIGN KEY ( oddzial_id )
    REFERENCES oddzial ( id );

ALTER TABLE sprzedawca ADD CONSTRAINT sprzedawca_stanowisko_fk FOREIGN KEY ( stanowisko_id )
    REFERENCES stanowisko ( id );

ALTER TABLE zamowienie ADD CONSTRAINT status_zamowienia_fk FOREIGN KEY ( status_zamowienia_id )
    REFERENCES status_zamowienia ( id );

ALTER TABLE ubezpieczenie ADD CONSTRAINT ubezpieczyciel_fk FOREIGN KEY ( ubezpieczyciel_id )
    REFERENCES ubezpieczyciel ( id );

ALTER TABLE upust_oddzialu ADD CONSTRAINT upust_oddzialu_oddzial_fk FOREIGN KEY ( oddzial_id )
    REFERENCES oddzial ( id )
        ON DELETE CASCADE;

ALTER TABLE upust_oddzialu ADD CONSTRAINT upust_oddzialu_upust_fk FOREIGN KEY ( upust_id )
    REFERENCES upust ( id )
        ON DELETE CASCADE;

ALTER TABLE wybrane_uslugi ADD CONSTRAINT wybrane_dodatki_zamowienie_fk FOREIGN KEY ( zamowienie_id )
    REFERENCES zamowienie ( id )
        ON DELETE CASCADE;

ALTER TABLE wybrane_uslugi ADD CONSTRAINT wybrane_uslugi_dodatkowe_fk FOREIGN KEY ( uslugi_dodatkowe_id )
    REFERENCES uslugi_dodatkowe ( id )
        ON DELETE CASCADE;

ALTER TABLE wybrane_pakiety ADD CONSTRAINT wybrany_dodatek FOREIGN KEY ( pakiet_dodatkowy_id )
    REFERENCES pakiet_dodatkowy ( id )
        ON DELETE CASCADE;

ALTER TABLE zamowienie ADD CONSTRAINT zamowienie_klient_fk FOREIGN KEY ( klient_id )
    REFERENCES klient ( id );

ALTER TABLE zamowienie ADD CONSTRAINT zamowienie_sprzedawca_fk FOREIGN KEY ( sprzedawca_id )
    REFERENCES sprzedawca ( id );

ALTER TABLE zamowienie ADD CONSTRAINT zamowienie_ubezpieczenie_fk FOREIGN KEY ( ubezpieczenie_id )
    REFERENCES ubezpieczenie ( id );

CREATE SEQUENCE adres_id_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER adres_id_trg BEFORE
    INSERT ON adres
    FOR EACH ROW
    WHEN (
        new.id IS NULL
    )
BEGIN
    :new.id := adres_id_seq.nextval;
END;
/

CREATE SEQUENCE klasa_wyposazenia_id_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER klasa_wyposazenia_id_trg BEFORE
    INSERT ON klasa_wyposazenia
    FOR EACH ROW
    WHEN (
        new.id IS NULL
    )
BEGIN
    :new.id := klasa_wyposazenia_id_seq.nextval;
END;
/

CREATE SEQUENCE klient_id_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER klient_id_trg BEFORE
    INSERT ON klient
    FOR EACH ROW
    WHEN (
        new.id IS NULL
    )
BEGIN
    :new.id := klient_id_seq.nextval;
END;
/

CREATE SEQUENCE kolor_id_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER kolor_id_trg BEFORE
    INSERT ON kolor
    FOR EACH ROW
    WHEN (
        new.id IS NULL
    )
BEGIN
    :new.id := kolor_id_seq.nextval;
END;
/

CREATE SEQUENCE marka_id_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER marka_id_trg BEFORE
    INSERT ON marka
    FOR EACH ROW
    WHEN (
        new.id IS NULL
    )
BEGIN
    :new.id := marka_id_seq.nextval;
END;
/

CREATE SEQUENCE model_id_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER model_id_trg BEFORE
    INSERT ON model
    FOR EACH ROW
    WHEN (
        new.id IS NULL
    )
BEGIN
    :new.id := model_id_seq.nextval;
END;
/

CREATE SEQUENCE oddzial_id_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER oddzial_id_trg BEFORE
    INSERT ON oddzial
    FOR EACH ROW
    WHEN (
        new.id IS NULL
    )
BEGIN
    :new.id := oddzial_id_seq.nextval;
END;
/

CREATE SEQUENCE pakiet_dodatkowy_id_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER pakiet_dodatkowy_id_trg BEFORE
    INSERT ON pakiet_dodatkowy
    FOR EACH ROW
    WHEN (
        new.id IS NULL
    )
BEGIN
    :new.id := pakiet_dodatkowy_id_seq.nextval;
END;
/

CREATE SEQUENCE platnosc_id_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER platnosc_id_trg BEFORE
    INSERT ON platnosc
    FOR EACH ROW
    WHEN (
        new.id IS NULL
    )
BEGIN
    :new.id := platnosc_id_seq.nextval;
END;
/

CREATE SEQUENCE rodzaj_platnosci_id_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER rodzaj_platnosci_id_trg BEFORE
    INSERT ON rodzaj_platnosci
    FOR EACH ROW
    WHEN (
        new.id IS NULL
    )
BEGIN
    :new.id := rodzaj_platnosci_id_seq.nextval;
END;
/

CREATE SEQUENCE samochod_id_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER samochod_id_trg BEFORE
    INSERT ON samochod
    FOR EACH ROW
    WHEN (
        new.id IS NULL
    )
BEGIN
    :new.id := samochod_id_seq.nextval;
END;
/

CREATE SEQUENCE silnik_id_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER silnik_id_trg BEFORE
    INSERT ON silnik
    FOR EACH ROW
    WHEN (
        new.id IS NULL
    )
BEGIN
    :new.id := silnik_id_seq.nextval;
END;
/

CREATE SEQUENCE sprzedawca_id_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER sprzedawca_id_trg BEFORE
    INSERT ON sprzedawca
    FOR EACH ROW
    WHEN (
        new.id IS NULL
    )
BEGIN
    :new.id := sprzedawca_id_seq.nextval;
END;
/

CREATE SEQUENCE stanowisko_id_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER stanowisko_id_trg BEFORE
    INSERT ON stanowisko
    FOR EACH ROW
    WHEN (
        new.id IS NULL
    )
BEGIN
    :new.id := stanowisko_id_seq.nextval;
END;
/

CREATE SEQUENCE status_platnosci_id_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER status_platnosci_id_trg BEFORE
    INSERT ON status_platnosci
    FOR EACH ROW
    WHEN (
        new.id IS NULL
    )
BEGIN
    :new.id := status_platnosci_id_seq.nextval;
END;
/

CREATE SEQUENCE status_zamowienia_id_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER status_zamowienia_id_trg BEFORE
    INSERT ON status_zamowienia
    FOR EACH ROW
    WHEN (
        new.id IS NULL
    )
BEGIN
    :new.id := status_zamowienia_id_seq.nextval;
END;
/

CREATE SEQUENCE ubezpieczenie_id_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER ubezpieczenie_id_trg BEFORE
    INSERT ON ubezpieczenie
    FOR EACH ROW
    WHEN (
        new.id IS NULL
    )
BEGIN
    :new.id := ubezpieczenie_id_seq.nextval;
END;
/

CREATE SEQUENCE ubezpieczyciel_id_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER ubezpieczyciel_id_trg BEFORE
    INSERT ON ubezpieczyciel
    FOR EACH ROW
    WHEN (
        new.id IS NULL
    )
BEGIN
    :new.id := ubezpieczyciel_id_seq.nextval;
END;
/

CREATE SEQUENCE upust_id_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER upust_id_trg BEFORE
    INSERT ON upust
    FOR EACH ROW
    WHEN (
        new.id IS NULL
    )
BEGIN
    :new.id := upust_id_seq.nextval;
END;
/

CREATE SEQUENCE uslugi_dodatkowe_id_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER uslugi_dodatkowe_id_trg BEFORE
    INSERT ON uslugi_dodatkowe
    FOR EACH ROW
    WHEN (
        new.id IS NULL
    )
BEGIN
    :new.id := uslugi_dodatkowe_id_seq.nextval;
END;
/

CREATE SEQUENCE wyposazenie_id_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER wyposazenie_id_trg BEFORE
    INSERT ON wyposazenie
    FOR EACH ROW
    WHEN (
        new.id IS NULL
    )
BEGIN
    :new.id := wyposazenie_id_seq.nextval;
END;
/

CREATE SEQUENCE zamowienie_id_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER zamowienie_id_trg BEFORE
    INSERT ON zamowienie
    FOR EACH ROW
    WHEN (
        new.id IS NULL
    )
BEGIN
    :new.id := zamowienie_id_seq.nextval;
END;
/



-- Oracle SQL Developer Data Modeler Summary Report: 
-- 
-- CREATE TABLE                            26
-- CREATE INDEX                             0
-- ALTER TABLE                             84
-- CREATE VIEW                              0
-- ALTER VIEW                               0
-- CREATE PACKAGE                           0
-- CREATE PACKAGE BODY                      0
-- CREATE PROCEDURE                         0
-- CREATE FUNCTION                          0
-- CREATE TRIGGER                          22
-- ALTER TRIGGER                            0
-- CREATE COLLECTION TYPE                   0
-- CREATE STRUCTURED TYPE                   0
-- CREATE STRUCTURED TYPE BODY              0
-- CREATE CLUSTER                           0
-- CREATE CONTEXT                           0
-- CREATE DATABASE                          0
-- CREATE DIMENSION                         0
-- CREATE DIRECTORY                         0
-- CREATE DISK GROUP                        0
-- CREATE ROLE                              0
-- CREATE ROLLBACK SEGMENT                  0
-- CREATE SEQUENCE                         22
-- CREATE MATERIALIZED VIEW                 0
-- CREATE SYNONYM                           0
-- CREATE TABLESPACE                        0
-- CREATE USER                              0
-- 
-- DROP TABLESPACE                          0
-- DROP DATABASE                            0
-- 
-- REDACTION POLICY                         0
-- 
-- ORDS DROP SCHEMA                         0
-- ORDS ENABLE SCHEMA                       0
-- ORDS ENABLE OBJECT                       0
-- 
-- ERRORS                                   0
-- WARNINGS                                 0




-- Autor: Krzysztof Szarafiñski
-- nr albumu: 155441
-- Data: 12.01.2017

Insert into ADRES (ULICA,MIASTO,NR_DOMU,NR_MIESZKANIA) values ('Pierwsza','Gdansk','45','1');
Insert into ADRES (ULICA,MIASTO,NR_DOMU,NR_MIESZKANIA) values ('Druga','Gdansk','12','6');
Insert into ADRES (ULICA,MIASTO,NR_DOMU,NR_MIESZKANIA) values ('Trzecia','Sopot','6',null);
Insert into ADRES (ULICA,MIASTO,NR_DOMU,NR_MIESZKANIA) values ('Czwarta','Sopot','99','5');
Insert into ADRES (ULICA,MIASTO,NR_DOMU,NR_MIESZKANIA) values ('Piata','Gdynia','3','12');
Insert into ADRES (ULICA,MIASTO,NR_DOMU,NR_MIESZKANIA) values ('Szosta','Gdynia','9','74');
Insert into ADRES (ULICA,MIASTO,NR_DOMU,NR_MIESZKANIA) values ('Siodma','Tczew','69',null);
Insert into ADRES (ULICA,MIASTO,NR_DOMU,NR_MIESZKANIA) values ('Osma','Tczew','45',null);
Insert into ADRES (ULICA,MIASTO,NR_DOMU,NR_MIESZKANIA) values ('Dziewiata','Tczew','13','587');
Insert into ADRES (ULICA,MIASTO,NR_DOMU,NR_MIESZKANIA) values ('Dziesiata','Warszawa','63','9');
Insert into ADRES (ULICA,MIASTO,NR_DOMU,NR_MIESZKANIA) values ('Jedenasta','Warszawa','21','4');
Insert into ADRES (ULICA,MIASTO,NR_DOMU,NR_MIESZKANIA) values ('Dwunasta','Warszawa','4',null);
Insert into ADRES (ULICA,MIASTO,NR_DOMU,NR_MIESZKANIA) values ('Trzynasta','Krakow','7','52');
Insert into ADRES (ULICA,MIASTO,NR_DOMU,NR_MIESZKANIA) values ('Czternasta','Krakow','7','53');
Insert into ADRES (ULICA,MIASTO,NR_DOMU,NR_MIESZKANIA) values ('Pietnasta','Lublin','3','99');
Insert into ADRES (ULICA,MIASTO,NR_DOMU,NR_MIESZKANIA) values ('Szesasta','Lublin','9','12');
Insert into ADRES (ULICA,MIASTO,NR_DOMU,NR_MIESZKANIA) values ('Siedemnasta','Poznan','1478',null);
Insert into ADRES (ULICA,MIASTO,NR_DOMU,NR_MIESZKANIA) values ('Osiemnasta','Poznan','16','9');
Insert into ADRES (ULICA,MIASTO,NR_DOMU,NR_MIESZKANIA) values ('Dziewietnasta','Rzeszow','1','7');
Insert into ADRES (ULICA,MIASTO,NR_DOMU,NR_MIESZKANIA) values ('Dzwadziesta','Rzeszow','33',null);

Insert into ODDZIAL (NAZWA,EMAIL,MIASTO) values ('CENTRALA','centrala@firma.pl','Warszawa');
Insert into ODDZIAL (NAZWA,EMAIL,MIASTO) values ('GDANSK','gdansk@firma.pl','Gdansk');
Insert into ODDZIAL (NAZWA,EMAIL,MIASTO) values ('KRAKOW','krakow@firma.pl','Krakow');

Insert into UPUST (NAZWA,WYSOKOSC,DATA_START,DATA_KONIEC,OPIS) values ('Wiosena Promocja','5',to_date('16/03/21','RR/MM/DD'),to_date('16/05/30','RR/MM/DD'),'Promocja dajaca 5% upustu od ceny zamowienia dokonana w Q2 2016');
Insert into UPUST (NAZWA,WYSOKOSC,DATA_START,DATA_KONIEC,OPIS) values ('Redukcja 2016','15',to_date('16/09/12','RR/MM/DD'),to_date('16/12/20','RR/MM/DD'),null);
Insert into UPUST (NAZWA,WYSOKOSC,DATA_START,DATA_KONIEC,OPIS) values ('Samochod na lato','10',to_date('15/03/21','RR/MM/DD'),to_date('15/09/30','RR/MM/DD'),'Przedluzona promocja wiosenna wazna przez dwa kwartaly');
Insert into UPUST (NAZWA,WYSOKOSC,DATA_START,DATA_KONIEC,OPIS) values ('Loteria 2015','5',to_date('15/07/01','RR/MM/DD'),to_date('16/06/30','RR/MM/DD'),null);
Insert into UPUST (NAZWA,WYSOKOSC,DATA_START,DATA_KONIEC,OPIS) values ('Loteria 2016','5',to_date('16/07/01','RR/MM/DD'),to_date('17/06/30','RR/MM/DD'),null);
Insert into UPUST (NAZWA,WYSOKOSC,DATA_START,DATA_KONIEC,OPIS) values ('Total Redukcja 2014','20',to_date('14/11/11','RR/MM/DD'),to_date('16/12/16','RR/MM/DD'),null);

Insert into UPUST_ODDZIALU (ODDZIAL_ID,UPUST_ID) values ('1','1');
Insert into UPUST_ODDZIALU (ODDZIAL_ID,UPUST_ID) values ('1','4');
Insert into UPUST_ODDZIALU (ODDZIAL_ID,UPUST_ID) values ('1','5');
Insert into UPUST_ODDZIALU (ODDZIAL_ID,UPUST_ID) values ('2','2');
Insert into UPUST_ODDZIALU (ODDZIAL_ID,UPUST_ID) values ('2','3');
Insert into UPUST_ODDZIALU (ODDZIAL_ID,UPUST_ID) values ('2','4');
Insert into UPUST_ODDZIALU (ODDZIAL_ID,UPUST_ID) values ('2','5');
Insert into UPUST_ODDZIALU (ODDZIAL_ID,UPUST_ID) values ('2','6');
Insert into UPUST_ODDZIALU (ODDZIAL_ID,UPUST_ID) values ('3','1');
Insert into UPUST_ODDZIALU (ODDZIAL_ID,UPUST_ID) values ('3','2');
Insert into UPUST_ODDZIALU (ODDZIAL_ID,UPUST_ID) values ('3','4');
Insert into UPUST_ODDZIALU (ODDZIAL_ID,UPUST_ID) values ('3','5');

Insert into STANOWISKO (NAZWA) values ('Sprzedawca ');
Insert into STANOWISKO (NAZWA) values ('Asystent');
Insert into STANOWISKO (NAZWA) values ('Kierownik');
Insert into STANOWISKO (NAZWA) values ('Dyrektor');

Insert into SPRZEDAWCA (IMIE,NAZWISKO,EMAIL,ODDZIAL_ID,STANOWISKO_ID,PENSJA) values ('Zenon','Suchy','z.suchy@firma.pl','1','1','2500');
Insert into SPRZEDAWCA (IMIE,NAZWISKO,EMAIL,ODDZIAL_ID,STANOWISKO_ID,PENSJA) values ('Wieslaw','Arkonski','w.arkonski@firma.pl','2','4','9000');
Insert into SPRZEDAWCA (IMIE,NAZWISKO,EMAIL,ODDZIAL_ID,STANOWISKO_ID,PENSJA) values ('Rysiek','Cywinka','r.cywinka@firma.pl','3','1','2400');
Insert into SPRZEDAWCA (IMIE,NAZWISKO,EMAIL,ODDZIAL_ID,STANOWISKO_ID,PENSJA) values ('Karolina','Moskit','k.moskit@firma.pl','1','4','9000');
Insert into SPRZEDAWCA (IMIE,NAZWISKO,EMAIL,ODDZIAL_ID,STANOWISKO_ID,PENSJA) values ('Paula','Nawko','p.nawko@firma.pl','2','2','1800');
Insert into SPRZEDAWCA (IMIE,NAZWISKO,EMAIL,ODDZIAL_ID,STANOWISKO_ID,PENSJA) values ('Marzena','Lumbka','m.lumbka@firma.pl','3','1','2700');
Insert into SPRZEDAWCA (IMIE,NAZWISKO,EMAIL,ODDZIAL_ID,STANOWISKO_ID,PENSJA) values ('Irek','Kubki','i.kubki@firma.pl','2','1','2500');
Insert into SPRZEDAWCA (IMIE,NAZWISKO,EMAIL,ODDZIAL_ID,STANOWISKO_ID,PENSJA) values ('Marek','Osko','m.osko@firma.pl','2','3','3900');
Insert into SPRZEDAWCA (IMIE,NAZWISKO,EMAIL,ODDZIAL_ID,STANOWISKO_ID,PENSJA) values ('Asia','Wrobko','a.wrobko@firma.pl','3','4','7000');

Insert into STATUS_ZAMOWIENIA (NAZWA) values ('zarejestrowane');
Insert into STATUS_ZAMOWIENIA (NAZWA) values ('oczekuje na platnosc');
Insert into STATUS_ZAMOWIENIA (NAZWA) values ('gotowe do odbioru');
Insert into STATUS_ZAMOWIENIA (NAZWA) values ('nie odebrane');
Insert into STATUS_ZAMOWIENIA (NAZWA) values ('odebrane');

Insert into KLIENT (PLEC,IMIE,NAZWISKO,EMAIL,ADRES_ID) values ('M','Jan','Kowalski','janek99@op.pl','6');
Insert into KLIENT (PLEC,IMIE,NAZWISKO,EMAIL,ADRES_ID) values ('K','Janina','Zlota','jadzka@tlen.pl','9');
Insert into KLIENT (PLEC,IMIE,NAZWISKO,EMAIL,ADRES_ID) values ('M','Karol','Kuchta','karolcio@zonka.pl','3');
Insert into KLIENT (PLEC,IMIE,NAZWISKO,EMAIL,ADRES_ID) values ('K','Frania','Kuchta','milutka9@ty.pl','3');
Insert into KLIENT (PLEC,IMIE,NAZWISKO,EMAIL,ADRES_ID) values ('M','Slawek','Piwron','sslaw@op.pl','20');
Insert into KLIENT (PLEC,IMIE,NAZWISKO,EMAIL,ADRES_ID) values ('K','Zuza','Banko','banko.zuza@wp.pl','16');
Insert into KLIENT (PLEC,IMIE,NAZWISKO,EMAIL,ADRES_ID) values ('M','Henryk','Mirko','miroslaw@wp.pl','2');
Insert into KLIENT (PLEC,IMIE,NAZWISKO,EMAIL,ADRES_ID) values ('M','Maciej','Wirko','m.wirko@op.pl','10');
Insert into KLIENT (PLEC,IMIE,NAZWISKO,EMAIL,ADRES_ID) values ('K','Kamila','Kot','hiacynt99@interia.pl','11');
Insert into KLIENT (PLEC,IMIE,NAZWISKO,EMAIL,ADRES_ID) values ('K','Magda','Radziecka','putin@ru.pl','13');

Insert into UBEZPIECZYCIEL (NAZWA) values ('AVIVA');
Insert into UBEZPIECZYCIEL (NAZWA) values ('Generali');
Insert into UBEZPIECZYCIEL (NAZWA) values ('Hestia');
Insert into UBEZPIECZYCIEL (NAZWA) values ('PZU');
Insert into UBEZPIECZYCIEL (NAZWA) values ('UNIQA');
Insert into UBEZPIECZYCIEL (NAZWA) values ('WARTA');

Insert into UBEZPIECZENIE (CENA,DATA_ZAWARCIA,POCZATEK,KONIEC,UBEZPIECZYCIEL_ID) values ('1500',to_date('16/11/03','RR/MM/DD'),to_date('16/11/03','RR/MM/DD'),to_date('17/11/02','RR/MM/DD'),'5');
Insert into UBEZPIECZENIE (CENA,DATA_ZAWARCIA,POCZATEK,KONIEC,UBEZPIECZYCIEL_ID) values ('2500',to_date('16/10/20','RR/MM/DD'),to_date('16/10/25','RR/MM/DD'),to_date('17/10/24','RR/MM/DD'),'1');
Insert into UBEZPIECZENIE (CENA,DATA_ZAWARCIA,POCZATEK,KONIEC,UBEZPIECZYCIEL_ID) values ('3600',to_date('15/02/09','RR/MM/DD'),to_date('15/03/08','RR/MM/DD'),to_date('16/03/07','RR/MM/DD'),'3');
Insert into UBEZPIECZENIE (CENA,DATA_ZAWARCIA,POCZATEK,KONIEC,UBEZPIECZYCIEL_ID) values ('1700',to_date('16/04/16','RR/MM/DD'),to_date('16/04/16','RR/MM/DD'),to_date('17/04/15','RR/MM/DD'),'2');
Insert into UBEZPIECZENIE (CENA,DATA_ZAWARCIA,POCZATEK,KONIEC,UBEZPIECZYCIEL_ID) values ('1900',to_date('16/07/27','RR/MM/DD'),to_date('16/07/28','RR/MM/DD'),to_date('17/07/27','RR/MM/DD'),'6');
Insert into UBEZPIECZENIE (CENA,DATA_ZAWARCIA,POCZATEK,KONIEC,UBEZPIECZYCIEL_ID) values ('2900',to_date('16/09/30','RR/MM/DD'),to_date('16/10/11','RR/MM/DD'),to_date('17/10/10','RR/MM/DD'),'4');
Insert into UBEZPIECZENIE (CENA,DATA_ZAWARCIA,POCZATEK,KONIEC,UBEZPIECZYCIEL_ID) values ('1200',to_date('17/01/10','RR/MM/DD'),to_date('17/01/10','RR/MM/DD'),to_date('18/01/10','RR/MM/DD'),'1');
Insert into UBEZPIECZENIE (CENA,DATA_ZAWARCIA,POCZATEK,KONIEC,UBEZPIECZYCIEL_ID) values ('900',to_date('17/01/05','RR/MM/DD'),to_date('17/01/05','RR/MM/DD'),to_date('17/12/05','RR/MM/DD'),'6');
Insert into UBEZPIECZENIE (CENA,DATA_ZAWARCIA,POCZATEK,KONIEC,UBEZPIECZYCIEL_ID) values ('3400',to_date('16/12/13','RR/MM/DD'),to_date('16/12/13','RR/MM/DD'),to_date('17/12/12','RR/MM/DD'),'4');
Insert into UBEZPIECZENIE (CENA,DATA_ZAWARCIA,POCZATEK,KONIEC,UBEZPIECZYCIEL_ID) values ('480',to_date('16/08/20','RR/MM/DD'),to_date('16/08/20','RR/MM/DD'),to_date('17/08/19','RR/MM/DD'),'3');
Insert into UBEZPIECZENIE (CENA,DATA_ZAWARCIA,POCZATEK,KONIEC,UBEZPIECZYCIEL_ID) values ('1800',to_date('15/02/28','RR/MM/DD'),to_date('15/02/28','RR/MM/DD'),to_date('16/02/27','RR/MM/DD'),'2');
Insert into UBEZPIECZENIE (CENA,DATA_ZAWARCIA,POCZATEK,KONIEC,UBEZPIECZYCIEL_ID) values ('1300',to_date('15/06/04','RR/MM/DD'),to_date('15/06/04','RR/MM/DD'),to_date('16/06/01','RR/MM/DD'),'5');
Insert into UBEZPIECZENIE (CENA,DATA_ZAWARCIA,POCZATEK,KONIEC,UBEZPIECZYCIEL_ID) values ('1000',to_date('15/09/17','RR/MM/DD'),to_date('15/09/17','RR/MM/DD'),to_date('16/09/01','RR/MM/DD'),'1');
Insert into UBEZPIECZENIE (CENA,DATA_ZAWARCIA,POCZATEK,KONIEC,UBEZPIECZYCIEL_ID) values ('1600',to_date('16/03/12','RR/MM/DD'),to_date('16/03/12','RR/MM/DD'),to_date('17/01/10','RR/MM/DD'),'4');
Insert into UBEZPIECZENIE (CENA,DATA_ZAWARCIA,POCZATEK,KONIEC,UBEZPIECZYCIEL_ID) values ('2100',to_date('16/11/30','RR/MM/DD'),to_date('16/11/30','RR/MM/DD'),to_date('17/11/08','RR/MM/DD'),'2');
Insert into UBEZPIECZENIE (CENA,DATA_ZAWARCIA,POCZATEK,KONIEC,UBEZPIECZYCIEL_ID) values ('1950',to_date('15/01/30','RR/MM/DD'),to_date('15/01/30','RR/MM/DD'),to_date('16/01/29','RR/MM/DD'),'6');
Insert into UBEZPIECZENIE (CENA,DATA_ZAWARCIA,POCZATEK,KONIEC,UBEZPIECZYCIEL_ID) values ('700',to_date('14/11/21','RR/MM/DD'),to_date('14/11/21','RR/MM/DD'),to_date('15/11/20','RR/MM/DD'),'5');
Insert into UBEZPIECZENIE (CENA,DATA_ZAWARCIA,POCZATEK,KONIEC,UBEZPIECZYCIEL_ID) values ('600',to_date('16/12/01','RR/MM/DD'),to_date('16/12/01','RR/MM/DD'),to_date('17/11/30','RR/MM/DD'),'3');
Insert into UBEZPIECZENIE (CENA,DATA_ZAWARCIA,POCZATEK,KONIEC,UBEZPIECZYCIEL_ID) values ('1540',to_date('15/05/26','RR/MM/DD'),to_date('15/05/26','RR/MM/DD'),to_date('16/05/25','RR/MM/DD'),'2');

Insert into ZAMOWIENIE (NR_UMOWY,DATA_ZAWARCIA,DATA_ODBIORU,KLIENT_ID,SPRZEDAWCA_ID,STATUS_ZAMOWIENIA_ID,UBEZPIECZENIE_ID) values ('20/11/2016',to_date('16/11/03','RR/MM/DD'),to_date('16/11/13','RR/MM/DD'),'1','2','1','1');
Insert into ZAMOWIENIE (NR_UMOWY,DATA_ZAWARCIA,DATA_ODBIORU,KLIENT_ID,SPRZEDAWCA_ID,STATUS_ZAMOWIENIA_ID,UBEZPIECZENIE_ID) values ('02/10/2016',to_date('16/10/20','RR/MM/DD'),to_date('16/10/30','RR/MM/DD'),'2','9','1','2');
Insert into ZAMOWIENIE (NR_UMOWY,DATA_ZAWARCIA,DATA_ODBIORU,KLIENT_ID,SPRZEDAWCA_ID,STATUS_ZAMOWIENIA_ID,UBEZPIECZENIE_ID) values ('05/02/2015',to_date('15/02/09','RR/MM/DD'),to_date('15/03/29','RR/MM/DD'),'3','4','1','3');
Insert into ZAMOWIENIE (NR_UMOWY,DATA_ZAWARCIA,DATA_ODBIORU,KLIENT_ID,SPRZEDAWCA_ID,STATUS_ZAMOWIENIA_ID,UBEZPIECZENIE_ID) values ('13/04/2016',to_date('16/04/16','RR/MM/DD'),to_date('16/05/02','RR/MM/DD'),'5','6','1','4');
Insert into ZAMOWIENIE (NR_UMOWY,DATA_ZAWARCIA,DATA_ODBIORU,KLIENT_ID,SPRZEDAWCA_ID,STATUS_ZAMOWIENIA_ID,UBEZPIECZENIE_ID) values ('01A/07/2016',to_date('16/07/27','RR/MM/DD'),to_date('16/07/28','RR/MM/DD'),'4','3','1','5');
Insert into ZAMOWIENIE (NR_UMOWY,DATA_ZAWARCIA,DATA_ODBIORU,KLIENT_ID,SPRZEDAWCA_ID,STATUS_ZAMOWIENIA_ID,UBEZPIECZENIE_ID) values ('01/07/2016',to_date('16/06/27','RR/MM/DD'),to_date('16/07/28','RR/MM/DD'),'3','3','1','5');
Insert into ZAMOWIENIE (NR_UMOWY,DATA_ZAWARCIA,DATA_ODBIORU,KLIENT_ID,SPRZEDAWCA_ID,STATUS_ZAMOWIENIA_ID,UBEZPIECZENIE_ID) values ('555/01/17',to_date('17/01/10','RR/MM/DD'),to_date('17/01/17','RR/MM/DD'),'2','1','1','7');
Insert into ZAMOWIENIE (NR_UMOWY,DATA_ZAWARCIA,DATA_ODBIORU,KLIENT_ID,SPRZEDAWCA_ID,STATUS_ZAMOWIENIA_ID,UBEZPIECZENIE_ID) values ('AKZ/12/16',to_date('17/01/05','RR/MM/DD'),to_date('17/02/16','RR/MM/DD'),'4','2','1','8');
Insert into ZAMOWIENIE (NR_UMOWY,DATA_ZAWARCIA,DATA_ODBIORU,KLIENT_ID,SPRZEDAWCA_ID,STATUS_ZAMOWIENIA_ID,UBEZPIECZENIE_ID) values ('B/12/16',to_date('16/12/13','RR/MM/DD'),to_date('17/01/10','RR/MM/DD'),'6','3','1','9');
Insert into ZAMOWIENIE (NR_UMOWY,DATA_ZAWARCIA,DATA_ODBIORU,KLIENT_ID,SPRZEDAWCA_ID,STATUS_ZAMOWIENIA_ID,UBEZPIECZENIE_ID) values ('04/08/2016',to_date('16/08/20','RR/MM/DD'),to_date('16/08/21','RR/MM/DD'),'9','8','1','10');
Insert into ZAMOWIENIE (NR_UMOWY,DATA_ZAWARCIA,DATA_ODBIORU,KLIENT_ID,SPRZEDAWCA_ID,STATUS_ZAMOWIENIA_ID,UBEZPIECZENIE_ID) values ('G4A/02/2015',to_date('15/02/28','RR/MM/DD'),to_date('15/03/04','RR/MM/DD'),'10','4','1','11');
Insert into ZAMOWIENIE (NR_UMOWY,DATA_ZAWARCIA,DATA_ODBIORU,KLIENT_ID,SPRZEDAWCA_ID,STATUS_ZAMOWIENIA_ID,UBEZPIECZENIE_ID) values ('77/06/15',to_date('15/06/04','RR/MM/DD'),to_date('15/06/04','RR/MM/DD'),'2','6','1','12');
Insert into ZAMOWIENIE (NR_UMOWY,DATA_ZAWARCIA,DATA_ODBIORU,KLIENT_ID,SPRZEDAWCA_ID,STATUS_ZAMOWIENIA_ID,UBEZPIECZENIE_ID) values ('AA/09/2015',to_date('15/09/17','RR/MM/DD'),to_date('15/09/27','RR/MM/DD'),'4','5','1','13');
Insert into ZAMOWIENIE (NR_UMOWY,DATA_ZAWARCIA,DATA_ODBIORU,KLIENT_ID,SPRZEDAWCA_ID,STATUS_ZAMOWIENIA_ID,UBEZPIECZENIE_ID) values ('06/03/2016',to_date('16/03/12','RR/MM/DD'),to_date('16/03/24','RR/MM/DD'),'1','7','1','14');
Insert into ZAMOWIENIE (NR_UMOWY,DATA_ZAWARCIA,DATA_ODBIORU,KLIENT_ID,SPRZEDAWCA_ID,STATUS_ZAMOWIENIA_ID,UBEZPIECZENIE_ID) values ('117/11/2016',to_date('16/11/30','RR/MM/DD'),to_date('16/12/15','RR/MM/DD'),'3','9','1','15');
Insert into ZAMOWIENIE (NR_UMOWY,DATA_ZAWARCIA,DATA_ODBIORU,KLIENT_ID,SPRZEDAWCA_ID,STATUS_ZAMOWIENIA_ID,UBEZPIECZENIE_ID) values ('1/01/15',to_date('15/01/30','RR/MM/DD'),to_date('15/02/14','RR/MM/DD'),'5','2','1','16');
Insert into ZAMOWIENIE (NR_UMOWY,DATA_ZAWARCIA,DATA_ODBIORU,KLIENT_ID,SPRZEDAWCA_ID,STATUS_ZAMOWIENIA_ID,UBEZPIECZENIE_ID) values ('03/11/2014',to_date('14/11/21','RR/MM/DD'),to_date('14/11/27','RR/MM/DD'),'7','1','1','17');
Insert into ZAMOWIENIE (NR_UMOWY,DATA_ZAWARCIA,DATA_ODBIORU,KLIENT_ID,SPRZEDAWCA_ID,STATUS_ZAMOWIENIA_ID,UBEZPIECZENIE_ID) values ('26/12/2016',to_date('16/12/01','RR/MM/DD'),to_date('16/12/23','RR/MM/DD'),'8','9','1','18');
Insert into ZAMOWIENIE (NR_UMOWY,DATA_ZAWARCIA,DATA_ODBIORU,KLIENT_ID,SPRZEDAWCA_ID,STATUS_ZAMOWIENIA_ID,UBEZPIECZENIE_ID) values ('12/05/2015',to_date('15/05/26','RR/MM/DD'),to_date('15/06/12','RR/MM/DD'),'3','6','1','19');
Insert into ZAMOWIENIE (NR_UMOWY,DATA_ZAWARCIA,DATA_ODBIORU,KLIENT_ID,SPRZEDAWCA_ID,STATUS_ZAMOWIENIA_ID,UBEZPIECZENIE_ID) values ('16/08/16',to_date('16/08/16','RR/MM/DD'),to_date('16/08/31','RR/MM/DD'),'1','4','1','10');

Insert into USLUGI_DODATKOWE (NAZWA,CENA) values ('pakiet zimowych opon','1500');
Insert into USLUGI_DODATKOWE (NAZWA,CENA) values ('voucher na myjnie na rok','1000');
Insert into USLUGI_DODATKOWE (NAZWA,CENA) values ('przechowywanie opon','70');
Insert into USLUGI_DODATKOWE (NAZWA,CENA) values ('hotel samochodowy','2000');
Insert into USLUGI_DODATKOWE (NAZWA,CENA) values ('przeglad','400');
Insert into USLUGI_DODATKOWE (NAZWA,CENA) values ('serwis klimatyzacji','100');

Insert into WYBRANE_USLUGI (ZAMOWIENIE_ID,USLUGI_DODATKOWE_ID) values ('1','1');
Insert into WYBRANE_USLUGI (ZAMOWIENIE_ID,USLUGI_DODATKOWE_ID) values ('1','6');
Insert into WYBRANE_USLUGI (ZAMOWIENIE_ID,USLUGI_DODATKOWE_ID) values ('4','2');
Insert into WYBRANE_USLUGI (ZAMOWIENIE_ID,USLUGI_DODATKOWE_ID) values ('6','5');
Insert into WYBRANE_USLUGI (ZAMOWIENIE_ID,USLUGI_DODATKOWE_ID) values ('8','6');
Insert into WYBRANE_USLUGI (ZAMOWIENIE_ID,USLUGI_DODATKOWE_ID) values ('9','1');
Insert into WYBRANE_USLUGI (ZAMOWIENIE_ID,USLUGI_DODATKOWE_ID) values ('12','4');
Insert into WYBRANE_USLUGI (ZAMOWIENIE_ID,USLUGI_DODATKOWE_ID) values ('14','1');
Insert into WYBRANE_USLUGI (ZAMOWIENIE_ID,USLUGI_DODATKOWE_ID) values ('16','2');
Insert into WYBRANE_USLUGI (ZAMOWIENIE_ID,USLUGI_DODATKOWE_ID) values ('20','3');

Insert into RODZAJ_PLATNOSCI (NAZWA) values ('gotowka');
Insert into RODZAJ_PLATNOSCI (NAZWA) values ('karta');
Insert into RODZAJ_PLATNOSCI (NAZWA) values ('kredyt');
Insert into RODZAJ_PLATNOSCI (NAZWA) values ('przelew');

Insert into STATUS_PLATNOSCI (NAZWA) values ('zaksiegowana');
Insert into STATUS_PLATNOSCI (NAZWA) values ('nadplata');
Insert into STATUS_PLATNOSCI (NAZWA) values ('do zwrotu');

Insert into PLATNOSC (DATA_DOKONANIA,KWOTA,UWAGI_DODATKOWE,STATUS_PLATNOSCI_ID,RODZAJ_PLATNOSCI_ID,KLIENT_ID,ZAMOWIENIE_ID) values (to_date('16/10/28','RR/MM/DD'),'1000',null,'1','1','2','2');
Insert into PLATNOSC (DATA_DOKONANIA,KWOTA,UWAGI_DODATKOWE,STATUS_PLATNOSCI_ID,RODZAJ_PLATNOSCI_ID,KLIENT_ID,ZAMOWIENIE_ID) values (to_date('16/05/16','RR/MM/DD'),'20000',null,'1','2','5','4');
Insert into PLATNOSC (DATA_DOKONANIA,KWOTA,UWAGI_DODATKOWE,STATUS_PLATNOSCI_ID,RODZAJ_PLATNOSCI_ID,KLIENT_ID,ZAMOWIENIE_ID) values (to_date('17/01/06','RR/MM/DD'),'30000',null,'1','3','4','8');
Insert into PLATNOSC (DATA_DOKONANIA,KWOTA,UWAGI_DODATKOWE,STATUS_PLATNOSCI_ID,RODZAJ_PLATNOSCI_ID,KLIENT_ID,ZAMOWIENIE_ID) values (to_date('17/01/10','RR/MM/DD'),'2000',null,'1','4','2','7');
Insert into PLATNOSC (DATA_DOKONANIA,KWOTA,UWAGI_DODATKOWE,STATUS_PLATNOSCI_ID,RODZAJ_PLATNOSCI_ID,KLIENT_ID,ZAMOWIENIE_ID) values (to_date('16/04/12','RR/MM/DD'),'500000',null,'1','1','1','14');
Insert into PLATNOSC (DATA_DOKONANIA,KWOTA,UWAGI_DODATKOWE,STATUS_PLATNOSCI_ID,RODZAJ_PLATNOSCI_ID,KLIENT_ID,ZAMOWIENIE_ID) values (to_date('16/12/13','RR/MM/DD'),'6000',null,'1','2','6','9');
Insert into PLATNOSC (DATA_DOKONANIA,KWOTA,UWAGI_DODATKOWE,STATUS_PLATNOSCI_ID,RODZAJ_PLATNOSCI_ID,KLIENT_ID,ZAMOWIENIE_ID) values (to_date('15/06/04','RR/MM/DD'),'30000',null,'1','2','2','12');
Insert into PLATNOSC (DATA_DOKONANIA,KWOTA,UWAGI_DODATKOWE,STATUS_PLATNOSCI_ID,RODZAJ_PLATNOSCI_ID,KLIENT_ID,ZAMOWIENIE_ID) values (to_date('16/11/30','RR/MM/DD'),'14520',null,'1','1','3','15');
Insert into PLATNOSC (DATA_DOKONANIA,KWOTA,UWAGI_DODATKOWE,STATUS_PLATNOSCI_ID,RODZAJ_PLATNOSCI_ID,KLIENT_ID,ZAMOWIENIE_ID) values (to_date('15/02/28','RR/MM/DD'),'1452',null,'1','3','10','11');
Insert into PLATNOSC (DATA_DOKONANIA,KWOTA,UWAGI_DODATKOWE,STATUS_PLATNOSCI_ID,RODZAJ_PLATNOSCI_ID,KLIENT_ID,ZAMOWIENIE_ID) values (to_date('16/06/27','RR/MM/DD'),'169752',null,'1','1','3','6');
Insert into PLATNOSC (DATA_DOKONANIA,KWOTA,UWAGI_DODATKOWE,STATUS_PLATNOSCI_ID,RODZAJ_PLATNOSCI_ID,KLIENT_ID,ZAMOWIENIE_ID) values (to_date('15/09/17','RR/MM/DD'),'42609',null,'1','2','4','13');
Insert into PLATNOSC (DATA_DOKONANIA,KWOTA,UWAGI_DODATKOWE,STATUS_PLATNOSCI_ID,RODZAJ_PLATNOSCI_ID,KLIENT_ID,ZAMOWIENIE_ID) values (to_date('16/08/16','RR/MM/DD'),'24587',null,'1','4','1','20');
Insert into PLATNOSC (DATA_DOKONANIA,KWOTA,UWAGI_DODATKOWE,STATUS_PLATNOSCI_ID,RODZAJ_PLATNOSCI_ID,KLIENT_ID,ZAMOWIENIE_ID) values (to_date('16/12/01','RR/MM/DD'),'86542',null,'1','1','8','18');
Insert into PLATNOSC (DATA_DOKONANIA,KWOTA,UWAGI_DODATKOWE,STATUS_PLATNOSCI_ID,RODZAJ_PLATNOSCI_ID,KLIENT_ID,ZAMOWIENIE_ID) values (to_date('15/02/09','RR/MM/DD'),'11258',null,'1','2','8','3');
Insert into PLATNOSC (DATA_DOKONANIA,KWOTA,UWAGI_DODATKOWE,STATUS_PLATNOSCI_ID,RODZAJ_PLATNOSCI_ID,KLIENT_ID,ZAMOWIENIE_ID) values (to_date('16/10/29','RR/MM/DD'),'1000',null,'1','1','2','2');
Insert into PLATNOSC (DATA_DOKONANIA,KWOTA,UWAGI_DODATKOWE,STATUS_PLATNOSCI_ID,RODZAJ_PLATNOSCI_ID,KLIENT_ID,ZAMOWIENIE_ID) values (to_date('16/10/30','RR/MM/DD'),'1000',null,'1','1','2','2');
Insert into PLATNOSC (DATA_DOKONANIA,KWOTA,UWAGI_DODATKOWE,STATUS_PLATNOSCI_ID,RODZAJ_PLATNOSCI_ID,KLIENT_ID,ZAMOWIENIE_ID) values (to_date('16/10/31','RR/MM/DD'),'1000',null,'1','1','2','2');
Insert into PLATNOSC (DATA_DOKONANIA,KWOTA,UWAGI_DODATKOWE,STATUS_PLATNOSCI_ID,RODZAJ_PLATNOSCI_ID,KLIENT_ID,ZAMOWIENIE_ID) values (to_date('16/10/31','RR/MM/DD'),'70000',null,'1','1','2','2');

Insert into WYPOSAZENIE (NAZWA) values ('Poduszki powietrzne czolowe dla kierowcy i pasazera');
Insert into WYPOSAZENIE (NAZWA) values ('Poduszki powietrzne boczne dla kierowcy i pasazera, pelnowymiarowe kurtyny powietrzne');
Insert into WYPOSAZENIE (NAZWA) values ('Pasy bezpieczenstwa z napinaczami (przod) oraz czujnikami obecnosci pasazera (przod/ tyl)');
Insert into WYPOSAZENIE (NAZWA) values ('ESC - System stabilizacji toru jazdy');
Insert into WYPOSAZENIE (NAZWA) values ('TCS - System kontroli trakcji, ');
Insert into WYPOSAZENIE (NAZWA) values ('HAC - System wspomagajacy pokonywanie podjazdow');
Insert into WYPOSAZENIE (NAZWA) values ('VSM - System podpowiedzi ruchu kierownicy');
Insert into WYPOSAZENIE (NAZWA) values ('ABS - System zapobiegajacy blokowaniu sie kol podczas hamowania ');
Insert into WYPOSAZENIE (NAZWA) values ('EBD - System rozdzialu sily hamowania');
Insert into WYPOSAZENIE (NAZWA) values ('BAS - System wspomagania hamowania');
Insert into WYPOSAZENIE (NAZWA) values ('ESS - System automatycznego wlaczania swiatel awaryjnych podczas gwaltownego hamowania');
Insert into WYPOSAZENIE (NAZWA) values ('Hamulce tarczowe przod i tyl');
Insert into WYPOSAZENIE (NAZWA) values ('swiatla mijania typu projekcyjnego');
Insert into WYPOSAZENIE (NAZWA) values ('Tylny spojler');
Insert into WYPOSAZENIE (NAZWA) values ('swiatla do jazdy dziennej wkomponowane w zderzak przedni');
Insert into WYPOSAZENIE (NAZWA) values ('Przednie lampy przeciwmgielne');
Insert into WYPOSAZENIE (NAZWA) values ('Czujniki parkowania tylem');
Insert into WYPOSAZENIE (NAZWA) values ('Elektryczne, progresywne wspomaganie ukladu kierowniczego, Regulacja kolumny kierownicy.');
Insert into WYPOSAZENIE (NAZWA) values ('System informacyjny: aktualna data i godzina, temperatura zewnetrzna, sygnalizacja otwartych drzwi');
Insert into WYPOSAZENIE (NAZWA) values ('Komputer pokladowy: pokonany dystans, zuzycie paliwa, czas jazdy, zasieg');
Insert into WYPOSAZENIE (NAZWA) values ('Elektrycznie sterowane szyby drzwi przednich');
Insert into WYPOSAZENIE (NAZWA) values ('Elektrycznie regulowane lusterka zewnetrzne');
Insert into WYPOSAZENIE (NAZWA) values ('Radioodtwarzacz CD MP3 z funkcja sterowania w kole kierownicy');
Insert into WYPOSAZENIE (NAZWA) values ('Bluetooth z zestawem glosnomowiacym');
Insert into WYPOSAZENIE (NAZWA) values ('Alarm obwodowy');
Insert into WYPOSAZENIE (NAZWA) values ('immobilizer');
Insert into WYPOSAZENIE (NAZWA) values ('Funkcja zdalnego sterowania centralnym zamkiem, automatyczne ryglowanie zamkow po ruszeniu');
Insert into WYPOSAZENIE (NAZWA) values ('Klimatyzacja manualna z funkcja chlodzenia schowka');
Insert into WYPOSAZENIE (NAZWA) values ('Podgrzewane lusterka zewnetrzne, lakierowane w kolorze nadwozia');
Insert into WYPOSAZENIE (NAZWA) values ('Centralny podlokietnik tylnej kanapy z uchwytami na kubki');
Insert into WYPOSAZENIE (NAZWA) values ('system nawigacji satelitarnej z obsluga w jezyku polskim, ');
Insert into WYPOSAZENIE (NAZWA) values ('Lampka do czytania w podsufitce oraz schowek na okulary');
Insert into WYPOSAZENIE (NAZWA) values ('Elektrycznie sterowane szyby drzwi przednich i tylnych z funkcja bezpieczenstwa');
Insert into WYPOSAZENIE (NAZWA) values ('lektrycznie skladane lusterka zewnetrzne z funkcja kierunkowskazow');
Insert into WYPOSAZENIE (NAZWA) values ('Elektrochromatyczne lusterko wewnetrzne');
Insert into WYPOSAZENIE (NAZWA) values ('system podgrzewania wycieraczek');
Insert into WYPOSAZENIE (NAZWA) values ('system otwierania i uruchamiania pojazdu bez uzycia kluczyka');
Insert into WYPOSAZENIE (NAZWA) values ('Dwie chromowane koncowki ukladu wydechowego');
Insert into WYPOSAZENIE (NAZWA) values ('podswietlenie klamek zewnetrznych drzwi przednich');
Insert into WYPOSAZENIE (NAZWA) values ('Aluminiowe nakladki na pedaly');
Insert into WYPOSAZENIE (NAZWA) values ('Sportowa stylistyka zderzakow');
Insert into WYPOSAZENIE (NAZWA) values ('Podgrzewane lusterka zewnetrzne, lakierowane w kolorze nadwozia');

Insert into KLASA_WYPOSAZENIA (NAZWA,OPIS) values ('S','small');
Insert into KLASA_WYPOSAZENIA (NAZWA,OPIS) values ('M','medium');
Insert into KLASA_WYPOSAZENIA (NAZWA,OPIS) values ('L','large');
Insert into KLASA_WYPOSAZENIA (NAZWA,OPIS) values ('GT','sport');

Insert into PAKIET_PODSTAWOWY (WYPOSAZENIE_ID,KLASA_WYPOSAZENIA_ID) values ('1','1');
Insert into PAKIET_PODSTAWOWY (WYPOSAZENIE_ID,KLASA_WYPOSAZENIA_ID) values ('1','2');
Insert into PAKIET_PODSTAWOWY (WYPOSAZENIE_ID,KLASA_WYPOSAZENIA_ID) values ('1','3');
Insert into PAKIET_PODSTAWOWY (WYPOSAZENIE_ID,KLASA_WYPOSAZENIA_ID) values ('1','4');
Insert into PAKIET_PODSTAWOWY (WYPOSAZENIE_ID,KLASA_WYPOSAZENIA_ID) values ('2','1');
Insert into PAKIET_PODSTAWOWY (WYPOSAZENIE_ID,KLASA_WYPOSAZENIA_ID) values ('2','2');
Insert into PAKIET_PODSTAWOWY (WYPOSAZENIE_ID,KLASA_WYPOSAZENIA_ID) values ('2','3');
Insert into PAKIET_PODSTAWOWY (WYPOSAZENIE_ID,KLASA_WYPOSAZENIA_ID) values ('2','4');
Insert into PAKIET_PODSTAWOWY (WYPOSAZENIE_ID,KLASA_WYPOSAZENIA_ID) values ('3','1');
Insert into PAKIET_PODSTAWOWY (WYPOSAZENIE_ID,KLASA_WYPOSAZENIA_ID) values ('3','2');
Insert into PAKIET_PODSTAWOWY (WYPOSAZENIE_ID,KLASA_WYPOSAZENIA_ID) values ('3','3');
Insert into PAKIET_PODSTAWOWY (WYPOSAZENIE_ID,KLASA_WYPOSAZENIA_ID) values ('3','4');
Insert into PAKIET_PODSTAWOWY (WYPOSAZENIE_ID,KLASA_WYPOSAZENIA_ID) values ('4','1');
Insert into PAKIET_PODSTAWOWY (WYPOSAZENIE_ID,KLASA_WYPOSAZENIA_ID) values ('4','2');
Insert into PAKIET_PODSTAWOWY (WYPOSAZENIE_ID,KLASA_WYPOSAZENIA_ID) values ('4','3');
Insert into PAKIET_PODSTAWOWY (WYPOSAZENIE_ID,KLASA_WYPOSAZENIA_ID) values ('4','4');
Insert into PAKIET_PODSTAWOWY (WYPOSAZENIE_ID,KLASA_WYPOSAZENIA_ID) values ('5','1');
Insert into PAKIET_PODSTAWOWY (WYPOSAZENIE_ID,KLASA_WYPOSAZENIA_ID) values ('5','2');
Insert into PAKIET_PODSTAWOWY (WYPOSAZENIE_ID,KLASA_WYPOSAZENIA_ID) values ('5','3');
Insert into PAKIET_PODSTAWOWY (WYPOSAZENIE_ID,KLASA_WYPOSAZENIA_ID) values ('5','4');
Insert into PAKIET_PODSTAWOWY (WYPOSAZENIE_ID,KLASA_WYPOSAZENIA_ID) values ('6','1');
Insert into PAKIET_PODSTAWOWY (WYPOSAZENIE_ID,KLASA_WYPOSAZENIA_ID) values ('6','2');
Insert into PAKIET_PODSTAWOWY (WYPOSAZENIE_ID,KLASA_WYPOSAZENIA_ID) values ('6','3');
Insert into PAKIET_PODSTAWOWY (WYPOSAZENIE_ID,KLASA_WYPOSAZENIA_ID) values ('6','4');
Insert into PAKIET_PODSTAWOWY (WYPOSAZENIE_ID,KLASA_WYPOSAZENIA_ID) values ('7','1');
Insert into PAKIET_PODSTAWOWY (WYPOSAZENIE_ID,KLASA_WYPOSAZENIA_ID) values ('7','2');
Insert into PAKIET_PODSTAWOWY (WYPOSAZENIE_ID,KLASA_WYPOSAZENIA_ID) values ('7','3');
Insert into PAKIET_PODSTAWOWY (WYPOSAZENIE_ID,KLASA_WYPOSAZENIA_ID) values ('7','4');
Insert into PAKIET_PODSTAWOWY (WYPOSAZENIE_ID,KLASA_WYPOSAZENIA_ID) values ('8','1');
Insert into PAKIET_PODSTAWOWY (WYPOSAZENIE_ID,KLASA_WYPOSAZENIA_ID) values ('8','2');
Insert into PAKIET_PODSTAWOWY (WYPOSAZENIE_ID,KLASA_WYPOSAZENIA_ID) values ('8','3');
Insert into PAKIET_PODSTAWOWY (WYPOSAZENIE_ID,KLASA_WYPOSAZENIA_ID) values ('8','4');
Insert into PAKIET_PODSTAWOWY (WYPOSAZENIE_ID,KLASA_WYPOSAZENIA_ID) values ('9','1');
Insert into PAKIET_PODSTAWOWY (WYPOSAZENIE_ID,KLASA_WYPOSAZENIA_ID) values ('9','2');
Insert into PAKIET_PODSTAWOWY (WYPOSAZENIE_ID,KLASA_WYPOSAZENIA_ID) values ('9','3');
Insert into PAKIET_PODSTAWOWY (WYPOSAZENIE_ID,KLASA_WYPOSAZENIA_ID) values ('9','4');
Insert into PAKIET_PODSTAWOWY (WYPOSAZENIE_ID,KLASA_WYPOSAZENIA_ID) values ('10','1');
Insert into PAKIET_PODSTAWOWY (WYPOSAZENIE_ID,KLASA_WYPOSAZENIA_ID) values ('10','2');
Insert into PAKIET_PODSTAWOWY (WYPOSAZENIE_ID,KLASA_WYPOSAZENIA_ID) values ('10','3');
Insert into PAKIET_PODSTAWOWY (WYPOSAZENIE_ID,KLASA_WYPOSAZENIA_ID) values ('10','4');
Insert into PAKIET_PODSTAWOWY (WYPOSAZENIE_ID,KLASA_WYPOSAZENIA_ID) values ('11','1');
Insert into PAKIET_PODSTAWOWY (WYPOSAZENIE_ID,KLASA_WYPOSAZENIA_ID) values ('11','2');
Insert into PAKIET_PODSTAWOWY (WYPOSAZENIE_ID,KLASA_WYPOSAZENIA_ID) values ('11','3');
Insert into PAKIET_PODSTAWOWY (WYPOSAZENIE_ID,KLASA_WYPOSAZENIA_ID) values ('11','4');
Insert into PAKIET_PODSTAWOWY (WYPOSAZENIE_ID,KLASA_WYPOSAZENIA_ID) values ('12','1');
Insert into PAKIET_PODSTAWOWY (WYPOSAZENIE_ID,KLASA_WYPOSAZENIA_ID) values ('12','2');
Insert into PAKIET_PODSTAWOWY (WYPOSAZENIE_ID,KLASA_WYPOSAZENIA_ID) values ('12','3');
Insert into PAKIET_PODSTAWOWY (WYPOSAZENIE_ID,KLASA_WYPOSAZENIA_ID) values ('12','4');
Insert into PAKIET_PODSTAWOWY (WYPOSAZENIE_ID,KLASA_WYPOSAZENIA_ID) values ('13','1');
Insert into PAKIET_PODSTAWOWY (WYPOSAZENIE_ID,KLASA_WYPOSAZENIA_ID) values ('13','2');
Insert into PAKIET_PODSTAWOWY (WYPOSAZENIE_ID,KLASA_WYPOSAZENIA_ID) values ('13','3');
Insert into PAKIET_PODSTAWOWY (WYPOSAZENIE_ID,KLASA_WYPOSAZENIA_ID) values ('13','4');
Insert into PAKIET_PODSTAWOWY (WYPOSAZENIE_ID,KLASA_WYPOSAZENIA_ID) values ('14','1');
Insert into PAKIET_PODSTAWOWY (WYPOSAZENIE_ID,KLASA_WYPOSAZENIA_ID) values ('14','2');
Insert into PAKIET_PODSTAWOWY (WYPOSAZENIE_ID,KLASA_WYPOSAZENIA_ID) values ('14','3');
Insert into PAKIET_PODSTAWOWY (WYPOSAZENIE_ID,KLASA_WYPOSAZENIA_ID) values ('14','4');
Insert into PAKIET_PODSTAWOWY (WYPOSAZENIE_ID,KLASA_WYPOSAZENIA_ID) values ('15','1');
Insert into PAKIET_PODSTAWOWY (WYPOSAZENIE_ID,KLASA_WYPOSAZENIA_ID) values ('15','2');
Insert into PAKIET_PODSTAWOWY (WYPOSAZENIE_ID,KLASA_WYPOSAZENIA_ID) values ('15','3');
Insert into PAKIET_PODSTAWOWY (WYPOSAZENIE_ID,KLASA_WYPOSAZENIA_ID) values ('15','4');
Insert into PAKIET_PODSTAWOWY (WYPOSAZENIE_ID,KLASA_WYPOSAZENIA_ID) values ('16','2');
Insert into PAKIET_PODSTAWOWY (WYPOSAZENIE_ID,KLASA_WYPOSAZENIA_ID) values ('16','3');
Insert into PAKIET_PODSTAWOWY (WYPOSAZENIE_ID,KLASA_WYPOSAZENIA_ID) values ('16','4');
Insert into PAKIET_PODSTAWOWY (WYPOSAZENIE_ID,KLASA_WYPOSAZENIA_ID) values ('17','3');
Insert into PAKIET_PODSTAWOWY (WYPOSAZENIE_ID,KLASA_WYPOSAZENIA_ID) values ('17','4');
Insert into PAKIET_PODSTAWOWY (WYPOSAZENIE_ID,KLASA_WYPOSAZENIA_ID) values ('18','1');
Insert into PAKIET_PODSTAWOWY (WYPOSAZENIE_ID,KLASA_WYPOSAZENIA_ID) values ('18','2');
Insert into PAKIET_PODSTAWOWY (WYPOSAZENIE_ID,KLASA_WYPOSAZENIA_ID) values ('18','3');
Insert into PAKIET_PODSTAWOWY (WYPOSAZENIE_ID,KLASA_WYPOSAZENIA_ID) values ('18','4');
Insert into PAKIET_PODSTAWOWY (WYPOSAZENIE_ID,KLASA_WYPOSAZENIA_ID) values ('19','1');
Insert into PAKIET_PODSTAWOWY (WYPOSAZENIE_ID,KLASA_WYPOSAZENIA_ID) values ('19','2');
Insert into PAKIET_PODSTAWOWY (WYPOSAZENIE_ID,KLASA_WYPOSAZENIA_ID) values ('19','3');
Insert into PAKIET_PODSTAWOWY (WYPOSAZENIE_ID,KLASA_WYPOSAZENIA_ID) values ('19','4');
Insert into PAKIET_PODSTAWOWY (WYPOSAZENIE_ID,KLASA_WYPOSAZENIA_ID) values ('20','1');
Insert into PAKIET_PODSTAWOWY (WYPOSAZENIE_ID,KLASA_WYPOSAZENIA_ID) values ('20','2');
Insert into PAKIET_PODSTAWOWY (WYPOSAZENIE_ID,KLASA_WYPOSAZENIA_ID) values ('20','3');
Insert into PAKIET_PODSTAWOWY (WYPOSAZENIE_ID,KLASA_WYPOSAZENIA_ID) values ('20','4');
Insert into PAKIET_PODSTAWOWY (WYPOSAZENIE_ID,KLASA_WYPOSAZENIA_ID) values ('21','1');
Insert into PAKIET_PODSTAWOWY (WYPOSAZENIE_ID,KLASA_WYPOSAZENIA_ID) values ('21','2');
Insert into PAKIET_PODSTAWOWY (WYPOSAZENIE_ID,KLASA_WYPOSAZENIA_ID) values ('21','3');
Insert into PAKIET_PODSTAWOWY (WYPOSAZENIE_ID,KLASA_WYPOSAZENIA_ID) values ('21','4');
Insert into PAKIET_PODSTAWOWY (WYPOSAZENIE_ID,KLASA_WYPOSAZENIA_ID) values ('22','1');
Insert into PAKIET_PODSTAWOWY (WYPOSAZENIE_ID,KLASA_WYPOSAZENIA_ID) values ('22','2');
Insert into PAKIET_PODSTAWOWY (WYPOSAZENIE_ID,KLASA_WYPOSAZENIA_ID) values ('22','3');
Insert into PAKIET_PODSTAWOWY (WYPOSAZENIE_ID,KLASA_WYPOSAZENIA_ID) values ('22','4');
Insert into PAKIET_PODSTAWOWY (WYPOSAZENIE_ID,KLASA_WYPOSAZENIA_ID) values ('23','1');
Insert into PAKIET_PODSTAWOWY (WYPOSAZENIE_ID,KLASA_WYPOSAZENIA_ID) values ('23','2');
Insert into PAKIET_PODSTAWOWY (WYPOSAZENIE_ID,KLASA_WYPOSAZENIA_ID) values ('23','3');
Insert into PAKIET_PODSTAWOWY (WYPOSAZENIE_ID,KLASA_WYPOSAZENIA_ID) values ('23','4');
Insert into PAKIET_PODSTAWOWY (WYPOSAZENIE_ID,KLASA_WYPOSAZENIA_ID) values ('24','1');
Insert into PAKIET_PODSTAWOWY (WYPOSAZENIE_ID,KLASA_WYPOSAZENIA_ID) values ('24','2');
Insert into PAKIET_PODSTAWOWY (WYPOSAZENIE_ID,KLASA_WYPOSAZENIA_ID) values ('24','3');
Insert into PAKIET_PODSTAWOWY (WYPOSAZENIE_ID,KLASA_WYPOSAZENIA_ID) values ('24','4');
Insert into PAKIET_PODSTAWOWY (WYPOSAZENIE_ID,KLASA_WYPOSAZENIA_ID) values ('25','1');
Insert into PAKIET_PODSTAWOWY (WYPOSAZENIE_ID,KLASA_WYPOSAZENIA_ID) values ('25','2');
Insert into PAKIET_PODSTAWOWY (WYPOSAZENIE_ID,KLASA_WYPOSAZENIA_ID) values ('25','3');
Insert into PAKIET_PODSTAWOWY (WYPOSAZENIE_ID,KLASA_WYPOSAZENIA_ID) values ('25','4');
Insert into PAKIET_PODSTAWOWY (WYPOSAZENIE_ID,KLASA_WYPOSAZENIA_ID) values ('26','1');
Insert into PAKIET_PODSTAWOWY (WYPOSAZENIE_ID,KLASA_WYPOSAZENIA_ID) values ('26','2');
Insert into PAKIET_PODSTAWOWY (WYPOSAZENIE_ID,KLASA_WYPOSAZENIA_ID) values ('26','3');
Insert into PAKIET_PODSTAWOWY (WYPOSAZENIE_ID,KLASA_WYPOSAZENIA_ID) values ('26','4');
Insert into PAKIET_PODSTAWOWY (WYPOSAZENIE_ID,KLASA_WYPOSAZENIA_ID) values ('27','1');
Insert into PAKIET_PODSTAWOWY (WYPOSAZENIE_ID,KLASA_WYPOSAZENIA_ID) values ('27','2');
Insert into PAKIET_PODSTAWOWY (WYPOSAZENIE_ID,KLASA_WYPOSAZENIA_ID) values ('27','3');
Insert into PAKIET_PODSTAWOWY (WYPOSAZENIE_ID,KLASA_WYPOSAZENIA_ID) values ('27','4');
Insert into PAKIET_PODSTAWOWY (WYPOSAZENIE_ID,KLASA_WYPOSAZENIA_ID) values ('28','1');
Insert into PAKIET_PODSTAWOWY (WYPOSAZENIE_ID,KLASA_WYPOSAZENIA_ID) values ('28','2');
Insert into PAKIET_PODSTAWOWY (WYPOSAZENIE_ID,KLASA_WYPOSAZENIA_ID) values ('29','2');
Insert into PAKIET_PODSTAWOWY (WYPOSAZENIE_ID,KLASA_WYPOSAZENIA_ID) values ('29','3');
Insert into PAKIET_PODSTAWOWY (WYPOSAZENIE_ID,KLASA_WYPOSAZENIA_ID) values ('29','4');
Insert into PAKIET_PODSTAWOWY (WYPOSAZENIE_ID,KLASA_WYPOSAZENIA_ID) values ('30','3');
Insert into PAKIET_PODSTAWOWY (WYPOSAZENIE_ID,KLASA_WYPOSAZENIA_ID) values ('30','4');
Insert into PAKIET_PODSTAWOWY (WYPOSAZENIE_ID,KLASA_WYPOSAZENIA_ID) values ('31','2');
Insert into PAKIET_PODSTAWOWY (WYPOSAZENIE_ID,KLASA_WYPOSAZENIA_ID) values ('31','3');
Insert into PAKIET_PODSTAWOWY (WYPOSAZENIE_ID,KLASA_WYPOSAZENIA_ID) values ('31','4');
Insert into PAKIET_PODSTAWOWY (WYPOSAZENIE_ID,KLASA_WYPOSAZENIA_ID) values ('32','2');
Insert into PAKIET_PODSTAWOWY (WYPOSAZENIE_ID,KLASA_WYPOSAZENIA_ID) values ('32','3');
Insert into PAKIET_PODSTAWOWY (WYPOSAZENIE_ID,KLASA_WYPOSAZENIA_ID) values ('32','4');
Insert into PAKIET_PODSTAWOWY (WYPOSAZENIE_ID,KLASA_WYPOSAZENIA_ID) values ('33','2');
Insert into PAKIET_PODSTAWOWY (WYPOSAZENIE_ID,KLASA_WYPOSAZENIA_ID) values ('33','3');
Insert into PAKIET_PODSTAWOWY (WYPOSAZENIE_ID,KLASA_WYPOSAZENIA_ID) values ('33','4');
Insert into PAKIET_PODSTAWOWY (WYPOSAZENIE_ID,KLASA_WYPOSAZENIA_ID) values ('34','3');
Insert into PAKIET_PODSTAWOWY (WYPOSAZENIE_ID,KLASA_WYPOSAZENIA_ID) values ('34','4');
Insert into PAKIET_PODSTAWOWY (WYPOSAZENIE_ID,KLASA_WYPOSAZENIA_ID) values ('35','3');
Insert into PAKIET_PODSTAWOWY (WYPOSAZENIE_ID,KLASA_WYPOSAZENIA_ID) values ('35','4');
Insert into PAKIET_PODSTAWOWY (WYPOSAZENIE_ID,KLASA_WYPOSAZENIA_ID) values ('36','3');
Insert into PAKIET_PODSTAWOWY (WYPOSAZENIE_ID,KLASA_WYPOSAZENIA_ID) values ('36','4');
Insert into PAKIET_PODSTAWOWY (WYPOSAZENIE_ID,KLASA_WYPOSAZENIA_ID) values ('37','3');
Insert into PAKIET_PODSTAWOWY (WYPOSAZENIE_ID,KLASA_WYPOSAZENIA_ID) values ('37','4');
Insert into PAKIET_PODSTAWOWY (WYPOSAZENIE_ID,KLASA_WYPOSAZENIA_ID) values ('38','4');
Insert into PAKIET_PODSTAWOWY (WYPOSAZENIE_ID,KLASA_WYPOSAZENIA_ID) values ('39','4');
Insert into PAKIET_PODSTAWOWY (WYPOSAZENIE_ID,KLASA_WYPOSAZENIA_ID) values ('40','4');
Insert into PAKIET_PODSTAWOWY (WYPOSAZENIE_ID,KLASA_WYPOSAZENIA_ID) values ('41','4');
Insert into PAKIET_PODSTAWOWY (WYPOSAZENIE_ID,KLASA_WYPOSAZENIA_ID) values ('42','4');

Insert into PAKIET_DODATKOWY (NAZWA,OPIS,CENA) values ('Fresh Air','Wnetrze samochodu wyposazonego w pakiet AIR-BALANCE mozna indywidualnie aromatyzowac. W zaleznosci od osobistych preferencji lub nastroju dostepne sa cztery szlachetne zapachy. Jonizowane powietrze, klimatyzacja','4000');
Insert into PAKIET_DODATKOWY (NAZWA,OPIS,CENA) values ('Pakiet Schowkow','Pakiet schowkow zawiera dodatkowe schowki i mocowania we wnetrzu auta oraz w bagazniku. Schowek pod lokietnikiem. Z tylu kieszenie na oparciach foteli ','3000');
Insert into PAKIET_DODATKOWY (NAZWA,OPIS,CENA) values ('Antykradziezowy','Alarm antykradziezowy ostrzega o wlamaniu do samochodu i kradziezy. System aktywowany jest przy zamykaniu samochodu pilotem zdalnego sterowania. Funkcja zabezpieczenia przed odholowaniem reaguje na zmiane polozenia pojazdu.','1000');
Insert into PAKIET_DODATKOWY (NAZWA,OPIS,CENA) values ('Pakiet Bezpieczeny','Polaczenie systemow bezpieczenstwa i wspomagania odciaza kierowce, zmniejsza ryzyko wypadku oraz chroni pasazerow. Aktywny asystent utrzymania pasa ruchu oraz aktywny asystent martwego punktu ','3500');
Insert into PAKIET_DODATKOWY (NAZWA,OPIS,CENA) values ('Smart Light','Obejmuje on posrednie oswietlenie obszaru przy podlodze i wnek klamek, podswietlane elementy na konsoli srodkowej, lampki do czytania z tylu oraz podswietlane lusterko do makijazu.','2300');
Insert into PAKIET_DODATKOWY (NAZWA,OPIS,CENA) values ('Pakiet Parkowania','Aktywny asystent parkowania z systemem PARKTRONIC ulatwia zarowno wyszukiwanie miejsc parkingowych polozonych rownolegle lub prostopadle do jezdni, jak i zaparkowanie i wyparkowanie. ','1900');
Insert into PAKIET_DODATKOWY (NAZWA,OPIS,CENA) values ('Pakiet Komfortowy','Klimatyzacja automatyczna dwustrefowa z 2 trybami pracy: SOFT i FAST oraz filtrem, przeciwpylkowym, jonizatorem powietrza, systemem automatycznego odparowywania przedniej szyby, funkcja
chlodzenia schowka','2500');
Insert into PAKIET_DODATKOWY (NAZWA,OPIS,CENA) values ('Pakiet Funkcjonalny','Wzbogacona iluminacja i wyglad zegarow deski rozdzielczej Kia Supervision Clusterr z wyswietlaczem LCD - wskazania aktualnej predkosci, informacji z czujnikow cofania, komputera pokladowego oraz ustawien systemowych auta','2500');
Insert into PAKIET_DODATKOWY (NAZWA,OPIS,CENA) values ('Pakiet Techniczny','system monitorowania ruchu pojazdow podczas cofania, system monitorowania martwego pola w lusterkach, Automatyczny system
parkowania rownoleglego i prostopadlego ','4000');
Insert into PAKIET_DODATKOWY (NAZWA,OPIS,CENA) values ('Pakiet Ratunkowy','System ratunkowy. Automatyczne: rozpoznanie wypadku, wezwanie sluzb ratowniczych, pomoc na zadanie, rejestracja parametrow wypadku, wezwanie assistance','3390');

Insert into MARKA (NAZWA,KRAJ) values ('VOLKSWAGEN','Niemcy');
Insert into MARKA (NAZWA,KRAJ) values ('OPEL','Niemcy');
Insert into MARKA (NAZWA,KRAJ) values ('RENAULT','Francja');
Insert into MARKA (NAZWA,KRAJ) values ('AUDI','Niemcy');
Insert into MARKA (NAZWA,KRAJ) values ('FORD','USA');
Insert into MARKA (NAZWA,KRAJ) values ('MERCEDES','Niemcy');
Insert into MARKA (NAZWA,KRAJ) values ('BMW','Niemcy');
Insert into MARKA (NAZWA,KRAJ) values ('PEUGEOT','Francja');
Insert into MARKA (NAZWA,KRAJ) values ('CITROEN','Francja');
Insert into MARKA (NAZWA,KRAJ) values ('SEAT','Niemcy');
Insert into MARKA (NAZWA,KRAJ) values ('KIA','Korea Poludniowa');
Insert into MARKA (NAZWA,KRAJ) values ('Hyundai','Korea Poludniowa');
Insert into MARKA (NAZWA,KRAJ) values ('Volvo','Szwecja');
Insert into MARKA (NAZWA,KRAJ) values ('Honda','Japonia');
Insert into MARKA (NAZWA,KRAJ) values ('Mazda','Japonia');

Insert into MODEL (NAZWA,MARKA_ID,ROK_PRODUKCJI,KLASA_WYPOSAZENIA_ID,CENA,LICZBA_DRZWI) values ('Pasat','1','2016','3','26252,15','4');
Insert into MODEL (NAZWA,MARKA_ID,ROK_PRODUKCJI,KLASA_WYPOSAZENIA_ID,CENA,LICZBA_DRZWI) values ('A4','4','2014','4','59665,75','5');
Insert into MODEL (NAZWA,MARKA_ID,ROK_PRODUKCJI,KLASA_WYPOSAZENIA_ID,CENA,LICZBA_DRZWI) values ('A6','4','2006','1','34436,31','3');
Insert into MODEL (NAZWA,MARKA_ID,ROK_PRODUKCJI,KLASA_WYPOSAZENIA_ID,CENA,LICZBA_DRZWI) values ('Astra','2','2016','1','51464,3','3');
Insert into MODEL (NAZWA,MARKA_ID,ROK_PRODUKCJI,KLASA_WYPOSAZENIA_ID,CENA,LICZBA_DRZWI) values ('Ceed','11','2013','4','49710,53','5');
Insert into MODEL (NAZWA,MARKA_ID,ROK_PRODUKCJI,KLASA_WYPOSAZENIA_ID,CENA,LICZBA_DRZWI) values ('6','15','2010','2','42624,84','3');
Insert into MODEL (NAZWA,MARKA_ID,ROK_PRODUKCJI,KLASA_WYPOSAZENIA_ID,CENA,LICZBA_DRZWI) values ('Mondeo','5','2012','1','50402,24','3');
Insert into MODEL (NAZWA,MARKA_ID,ROK_PRODUKCJI,KLASA_WYPOSAZENIA_ID,CENA,LICZBA_DRZWI) values ('Laguna','2','1998','2','56581,31','2');
Insert into MODEL (NAZWA,MARKA_ID,ROK_PRODUKCJI,KLASA_WYPOSAZENIA_ID,CENA,LICZBA_DRZWI) values ('Vectra','3','2015','1','30287,01','3');
Insert into MODEL (NAZWA,MARKA_ID,ROK_PRODUKCJI,KLASA_WYPOSAZENIA_ID,CENA,LICZBA_DRZWI) values ('Civic','14','1998','2','42013,95','5');
Insert into MODEL (NAZWA,MARKA_ID,ROK_PRODUKCJI,KLASA_WYPOSAZENIA_ID,CENA,LICZBA_DRZWI) values ('Jazz','14','2014','4','34395,18','3');
Insert into MODEL (NAZWA,MARKA_ID,ROK_PRODUKCJI,KLASA_WYPOSAZENIA_ID,CENA,LICZBA_DRZWI) values ('C5','9','2016','3','47810,45','4');
Insert into MODEL (NAZWA,MARKA_ID,ROK_PRODUKCJI,KLASA_WYPOSAZENIA_ID,CENA,LICZBA_DRZWI) values ('306','8','2015','3','24734,28','4');
Insert into MODEL (NAZWA,MARKA_ID,ROK_PRODUKCJI,KLASA_WYPOSAZENIA_ID,CENA,LICZBA_DRZWI) values ('V40','13','2016','1','59196,62','5');
Insert into MODEL (NAZWA,MARKA_ID,ROK_PRODUKCJI,KLASA_WYPOSAZENIA_ID,CENA,LICZBA_DRZWI) values ('Cordoba','10','2014','4','47810,36','5');
Insert into MODEL (NAZWA,MARKA_ID,ROK_PRODUKCJI,KLASA_WYPOSAZENIA_ID,CENA,LICZBA_DRZWI) values ('A','6','2015','3','41948,06','5');
Insert into MODEL (NAZWA,MARKA_ID,ROK_PRODUKCJI,KLASA_WYPOSAZENIA_ID,CENA,LICZBA_DRZWI) values ('B','6','2015','3','43324,58','5');
Insert into MODEL (NAZWA,MARKA_ID,ROK_PRODUKCJI,KLASA_WYPOSAZENIA_ID,CENA,LICZBA_DRZWI) values ('C','6','2015','3','36694,53','5');
Insert into MODEL (NAZWA,MARKA_ID,ROK_PRODUKCJI,KLASA_WYPOSAZENIA_ID,CENA,LICZBA_DRZWI) values ('Golf','1','2014','4','76541,32','5');
Insert into MODEL (NAZWA,MARKA_ID,ROK_PRODUKCJI,KLASA_WYPOSAZENIA_ID,CENA,LICZBA_DRZWI) values ('3','15','2011','2','36541,32','3');
Insert into MODEL (NAZWA,MARKA_ID,ROK_PRODUKCJI,KLASA_WYPOSAZENIA_ID,CENA,LICZBA_DRZWI) values ('i30','12','2006','1','46789,21','5');
Insert into MODEL (NAZWA,MARKA_ID,ROK_PRODUKCJI,KLASA_WYPOSAZENIA_ID,CENA,LICZBA_DRZWI) values ('i40','12','2013','1','63247,87','5');
Insert into MODEL (NAZWA,MARKA_ID,ROK_PRODUKCJI,KLASA_WYPOSAZENIA_ID,CENA,LICZBA_DRZWI) values ('Ceed','11','2014','4','78523,12','5');
Insert into MODEL (NAZWA,MARKA_ID,ROK_PRODUKCJI,KLASA_WYPOSAZENIA_ID,CENA,LICZBA_DRZWI) values ('Sportage','11','2009','2','96347,21','5');
Insert into MODEL (NAZWA,MARKA_ID,ROK_PRODUKCJI,KLASA_WYPOSAZENIA_ID,CENA,LICZBA_DRZWI) values ('Ibiza','10','2015','1','47856,12','3');
Insert into MODEL (NAZWA,MARKA_ID,ROK_PRODUKCJI,KLASA_WYPOSAZENIA_ID,CENA,LICZBA_DRZWI) values ('Toledo','10','2016','1','74521,3','4');
Insert into MODEL (NAZWA,MARKA_ID,ROK_PRODUKCJI,KLASA_WYPOSAZENIA_ID,CENA,LICZBA_DRZWI) values ('C3','9','2010','3','48759,88','5');
Insert into MODEL (NAZWA,MARKA_ID,ROK_PRODUKCJI,KLASA_WYPOSAZENIA_ID,CENA,LICZBA_DRZWI) values ('301','8','2012','1','90125,36','5');
Insert into MODEL (NAZWA,MARKA_ID,ROK_PRODUKCJI,KLASA_WYPOSAZENIA_ID,CENA,LICZBA_DRZWI) values ('i3','7','2016','3','102654,33','5');
Insert into MODEL (NAZWA,MARKA_ID,ROK_PRODUKCJI,KLASA_WYPOSAZENIA_ID,CENA,LICZBA_DRZWI) values ('i8','7','2014','3','120001,66','5');
Insert into MODEL (NAZWA,MARKA_ID,ROK_PRODUKCJI,KLASA_WYPOSAZENIA_ID,CENA,LICZBA_DRZWI) values ('C-max','5','2013','2','40654,98','4');
Insert into MODEL (NAZWA,MARKA_ID,ROK_PRODUKCJI,KLASA_WYPOSAZENIA_ID,CENA,LICZBA_DRZWI) values ('Fiesta','5','2000','4','30012,99','2');
Insert into MODEL (NAZWA,MARKA_ID,ROK_PRODUKCJI,KLASA_WYPOSAZENIA_ID,CENA,LICZBA_DRZWI) values ('Clio','3','2014','1','23541','3');
Insert into MODEL (NAZWA,MARKA_ID,ROK_PRODUKCJI,KLASA_WYPOSAZENIA_ID,CENA,LICZBA_DRZWI) values ('Clio','3','2015','4','80000','5');
Insert into MODEL (NAZWA,MARKA_ID,ROK_PRODUKCJI,KLASA_WYPOSAZENIA_ID,CENA,LICZBA_DRZWI) values ('i30','12','2013','4','70096,22','5');

Insert into SILNIK (TYP,POJEMNOSC,CENA) values ('BENZYNA','1598','5000');
Insert into SILNIK (TYP,POJEMNOSC,CENA) values ('BENZYNA','1624','8000');
Insert into SILNIK (TYP,POJEMNOSC,CENA) values ('BENZYNA','1799','10000');
Insert into SILNIK (TYP,POJEMNOSC,CENA) values ('DIESEL','1686','9000');
Insert into SILNIK (TYP,POJEMNOSC,CENA) values ('DIESEL','1994','11000');
Insert into SILNIK (TYP,POJEMNOSC,CENA) values ('DIESEL','2171','12000');

Insert into KOLOR (NAZWA,ODCIEN,CENA) values ('bialy','biel alpejska','200');
Insert into KOLOR (NAZWA,ODCIEN,CENA) values ('niebieski','blekit krolewski','600');
Insert into KOLOR (NAZWA,ODCIEN,CENA) values ('czerwony','czerwien rubinu','700');
Insert into KOLOR (NAZWA,ODCIEN,CENA) values ('niebieski','blekit malte','300');
Insert into KOLOR (NAZWA,ODCIEN,CENA) values ('braz','braz kasztanowy','1100');
Insert into KOLOR (NAZWA,ODCIEN,CENA) values ('braz','bez popielaty','600');
Insert into KOLOR (NAZWA,ODCIEN,CENA) values ('czarny','czarny etoile','1000');
Insert into KOLOR (NAZWA,ODCIEN,CENA) values ('szary','platynowy','750');
Insert into KOLOR (NAZWA,ODCIEN,CENA) values ('szary','szary kasjopea','960');
Insert into KOLOR (NAZWA,ODCIEN,CENA) values ('czarny','eclipse','1140');

Insert into SAMOCHOD (NR_VIN,PRZEJECHANY_DYSTANS,ZAMOWIENIE_ID,MODEL_ID,SILNIK_ID,KOLOR_ID) values ('KMHTC6AD3FU230508','648','2','34','1','10');
Insert into SAMOCHOD (NR_VIN,PRZEJECHANY_DYSTANS,ZAMOWIENIE_ID,MODEL_ID,SILNIK_ID,KOLOR_ID) values ('1VWBV7A36FC040227','1084','3','25','5','7');
Insert into SAMOCHOD (NR_VIN,PRZEJECHANY_DYSTANS,ZAMOWIENIE_ID,MODEL_ID,SILNIK_ID,KOLOR_ID) values ('2GNALBEK7F6118474','1921','1','20','4','6');
Insert into SAMOCHOD (NR_VIN,PRZEJECHANY_DYSTANS,ZAMOWIENIE_ID,MODEL_ID,SILNIK_ID,KOLOR_ID) values ('1GCEK19K0SE133793','286','4','31','6','9');
Insert into SAMOCHOD (NR_VIN,PRZEJECHANY_DYSTANS,ZAMOWIENIE_ID,MODEL_ID,SILNIK_ID,KOLOR_ID) values ('1G1ZA5EU7BF150662','2952','5','13','3','4');
Insert into SAMOCHOD (NR_VIN,PRZEJECHANY_DYSTANS,ZAMOWIENIE_ID,MODEL_ID,SILNIK_ID,KOLOR_ID) values ('3GCEC23069G244460','682','6','17','4','5');
Insert into SAMOCHOD (NR_VIN,PRZEJECHANY_DYSTANS,ZAMOWIENIE_ID,MODEL_ID,SILNIK_ID,KOLOR_ID) values ('1FM5K8GT9FGA51717','986','7','12','3','3');
Insert into SAMOCHOD (NR_VIN,PRZEJECHANY_DYSTANS,ZAMOWIENIE_ID,MODEL_ID,SILNIK_ID,KOLOR_ID) values ('2G1FB1ED9B9115736','2391','8','2','1','1');
Insert into SAMOCHOD (NR_VIN,PRZEJECHANY_DYSTANS,ZAMOWIENIE_ID,MODEL_ID,SILNIK_ID,KOLOR_ID) values ('1GCSKREA0AZ259108','585','9','12','3','4');
Insert into SAMOCHOD (NR_VIN,PRZEJECHANY_DYSTANS,ZAMOWIENIE_ID,MODEL_ID,SILNIK_ID,KOLOR_ID) values ('1GKS1HE04BR217941','1624','10','22','5','6');
Insert into SAMOCHOD (NR_VIN,PRZEJECHANY_DYSTANS,ZAMOWIENIE_ID,MODEL_ID,SILNIK_ID,KOLOR_ID) values ('5ZVBE1423AD003776','1927','11','4','2','1');
Insert into SAMOCHOD (NR_VIN,PRZEJECHANY_DYSTANS,ZAMOWIENIE_ID,MODEL_ID,SILNIK_ID,KOLOR_ID) values ('2HNYD2H81DH505716','2508','12','28','6','8');
Insert into SAMOCHOD (NR_VIN,PRZEJECHANY_DYSTANS,ZAMOWIENIE_ID,MODEL_ID,SILNIK_ID,KOLOR_ID) values ('5TFJX4CN6BX008905','527','13','1','1','10');
Insert into SAMOCHOD (NR_VIN,PRZEJECHANY_DYSTANS,ZAMOWIENIE_ID,MODEL_ID,SILNIK_ID,KOLOR_ID) values ('JHLRE48508C010699','2924','14','14','3','4');
Insert into SAMOCHOD (NR_VIN,PRZEJECHANY_DYSTANS,ZAMOWIENIE_ID,MODEL_ID,SILNIK_ID,KOLOR_ID) values ('1C6RR6GT4ES179209','2725','15','26','5','7');
Insert into SAMOCHOD (NR_VIN,PRZEJECHANY_DYSTANS,ZAMOWIENIE_ID,MODEL_ID,SILNIK_ID,KOLOR_ID) values ('1N4AA5AP5BC812041','2729','16','29','6','8');
Insert into SAMOCHOD (NR_VIN,PRZEJECHANY_DYSTANS,ZAMOWIENIE_ID,MODEL_ID,SILNIK_ID,KOLOR_ID) values ('KNAGM4AD0D5044856','2087','17','34','1','10');
Insert into SAMOCHOD (NR_VIN,PRZEJECHANY_DYSTANS,ZAMOWIENIE_ID,MODEL_ID,SILNIK_ID,KOLOR_ID) values ('WBA3C1C5XFP852323','1368','18','8','2','2');
Insert into SAMOCHOD (NR_VIN,PRZEJECHANY_DYSTANS,ZAMOWIENIE_ID,MODEL_ID,SILNIK_ID,KOLOR_ID) values ('1XKADB8X26J092113','172','19','22','5','6');
Insert into SAMOCHOD (NR_VIN,PRZEJECHANY_DYSTANS,ZAMOWIENIE_ID,MODEL_ID,SILNIK_ID,KOLOR_ID) values ('1FTPW14V99FB39420','2661','20','11','3','3');
Insert into SAMOCHOD (NR_VIN,PRZEJECHANY_DYSTANS,ZAMOWIENIE_ID,MODEL_ID,SILNIK_ID,KOLOR_ID) values ('1FTFW1ET2DKG44594','682','1','30','6','8');
Insert into SAMOCHOD (NR_VIN,PRZEJECHANY_DYSTANS,ZAMOWIENIE_ID,MODEL_ID,SILNIK_ID,KOLOR_ID) values ('WMWMF73598TV33097','572','2','33','1','9');
Insert into SAMOCHOD (NR_VIN,PRZEJECHANY_DYSTANS,ZAMOWIENIE_ID,MODEL_ID,SILNIK_ID,KOLOR_ID) values ('WVWMA23B7YP355662','1546','13','18','4','5');
Insert into SAMOCHOD (NR_VIN,PRZEJECHANY_DYSTANS,ZAMOWIENIE_ID,MODEL_ID,SILNIK_ID,KOLOR_ID) values ('1FTPW14514KC03224','2357','14','3','1','1');
Insert into SAMOCHOD (NR_VIN,PRZEJECHANY_DYSTANS,ZAMOWIENIE_ID,MODEL_ID,SILNIK_ID,KOLOR_ID) values ('3VWFW31C98M510694','2165','15','8','2','2');
Insert into SAMOCHOD (NR_VIN,PRZEJECHANY_DYSTANS,ZAMOWIENIE_ID,MODEL_ID,SILNIK_ID,KOLOR_ID) values ('1FM5K7F88EGA60690','100',null,'35','6','5');
Insert into SAMOCHOD (NR_VIN,PRZEJECHANY_DYSTANS,ZAMOWIENIE_ID,MODEL_ID,SILNIK_ID,KOLOR_ID) values ('1FT7X2BT4BEC19899','2',null,'11','1','1');
Insert into SAMOCHOD (NR_VIN,PRZEJECHANY_DYSTANS,ZAMOWIENIE_ID,MODEL_ID,SILNIK_ID,KOLOR_ID) values ('WA1UFAFL4DA229069','3',null,'7','4','9');
Insert into SAMOCHOD (NR_VIN,PRZEJECHANY_DYSTANS,ZAMOWIENIE_ID,MODEL_ID,SILNIK_ID,KOLOR_ID) values ('KMHCT4AE6FU822000','40',null,'3','3','7');
Insert into SAMOCHOD (NR_VIN,PRZEJECHANY_DYSTANS,ZAMOWIENIE_ID,MODEL_ID,SILNIK_ID,KOLOR_ID) values ('1N4BL2AP4CC152492','60',null,'6','2','3');

Insert into WYBRANE_PAKIETY (SAMOCHOD_ID,PAKIET_DODATKOWY_ID) values ('3','3');
Insert into WYBRANE_PAKIETY (SAMOCHOD_ID,PAKIET_DODATKOWY_ID) values ('4','2');
Insert into WYBRANE_PAKIETY (SAMOCHOD_ID,PAKIET_DODATKOWY_ID) values ('4','4');
Insert into WYBRANE_PAKIETY (SAMOCHOD_ID,PAKIET_DODATKOWY_ID) values ('4','6');
Insert into WYBRANE_PAKIETY (SAMOCHOD_ID,PAKIET_DODATKOWY_ID) values ('6','8');
Insert into WYBRANE_PAKIETY (SAMOCHOD_ID,PAKIET_DODATKOWY_ID) values ('7','7');
Insert into WYBRANE_PAKIETY (SAMOCHOD_ID,PAKIET_DODATKOWY_ID) values ('8','1');
Insert into WYBRANE_PAKIETY (SAMOCHOD_ID,PAKIET_DODATKOWY_ID) values ('8','3');
Insert into WYBRANE_PAKIETY (SAMOCHOD_ID,PAKIET_DODATKOWY_ID) values ('10','1');
Insert into WYBRANE_PAKIETY (SAMOCHOD_ID,PAKIET_DODATKOWY_ID) values ('10','5');
Insert into WYBRANE_PAKIETY (SAMOCHOD_ID,PAKIET_DODATKOWY_ID) values ('10','10');
Insert into WYBRANE_PAKIETY (SAMOCHOD_ID,PAKIET_DODATKOWY_ID) values ('11','5');
Insert into WYBRANE_PAKIETY (SAMOCHOD_ID,PAKIET_DODATKOWY_ID) values ('11','9');
Insert into WYBRANE_PAKIETY (SAMOCHOD_ID,PAKIET_DODATKOWY_ID) values ('12','4');
Insert into WYBRANE_PAKIETY (SAMOCHOD_ID,PAKIET_DODATKOWY_ID) values ('17','4');


-- Autor: Krzysztof Szarafiñski
-- nr albumu: 155441
-- Data: 12.01.2017

set serveroutput on
/* Funkcja 1
-- ponizsza funkcja zwraca cene samochodu uwzgledniajac: model, wybrany kolor, silnik oraz wybrane pakiety dodatkowe
-- jako argument przyjmuje numer indeksu wybranego samochodu z dostepnych modeli
*/
create or replace function cena_samochodu(numer int) return number is
cursor ceny is select jeden.model, jeden.kolor, jeden.silnik, nvl(dwa.cena,0) as pakiet from
  (select s.id as numer, model.cena as model, kolor.cena as kolor, silnik.cena as silnik
  from model, kolor, silnik, samochod s 
  where s.model_id=model.id and s.silnik_id=silnik.id and s.kolor_id=kolor.id and s.id = numer) jeden 
left join
  (select s.id as numer, p.cena as cena 
    from samochod s, wybrane_pakiety w, pakiet_dodatkowy p 
    where s.id = w.SAMOCHOD_ID and p.id = w.PAKIET_DODATKOWY_ID and s.id = numer) dwa 
on dwa.numer=jeden.numer;
cena MODEL.CENA%type := 0;
begin
for rekord in ceny loop
  cena := cena + rekord.silnik + rekord.kolor + rekord.model+ rekord.pakiet;
end loop;
return cena;
exception
  when no_data_found then
    return 0;
end;
/

-- sprawdzenie
begin
dbms_output.put_line('cena samochodu 15 to: ' || cena_samochodu(15) || ' PLN.');
end;
/

/* Funkcja 2
 zwraca wyliczony maksymalny upust jaki mogl zastosowac sprzedawca w dniu zawarcia umowy.
 ograniczeniem jest ze wysokosc upustu pomimo ze z wykorzystaniem promocji mogla nawet przekroczyc 50% ceny,
 to zostala ograniczona do maksymalnie 20%. Funkcja przyjmuje jako argument numer zamowienia (id zamowienia)
*/
create or replace function upust_zamowienia(numer int) return number is
wynik UPUST.WYSOKOSC%type :=0;
begin
SELECT sum(upust.wysokosc) into wynik
FROM  upust  INNER JOIN upust_oddzialu
    ON upust.id = upust_oddzialu.upust_id
    INNER JOIN oddzial
    ON oddzial.id = upust_oddzialu.oddzial_id
    INNER JOIN sprzedawca
    ON oddzial.id = sprzedawca.oddzial_id
    INNER JOIN zamowienie 
    ON sprzedawca.id = zamowienie.sprzedawca_id
WHERE zamowienie.data_zawarcia between upust.data_start and UPUST.DATA_KONIEC and zamowienie.id = numer
GROUP BY zamowienie.id;

if wynik >=20 then
    return 20;
ELSE
    return wynik;
end if;
exception
  when no_data_found then
    return 0;
end;
/

-- sprawdzenie
begin
dbms_output.put_line('Wartosc upustu dla sprzedazy numer 5: ' || upust_zamowienia(5)|| '%.');
end;
/

/* Funkcja 3
funkcja cena_zamowienia zwraca cene dla zamowienia o zadanym parametrze jakim jest NR_ZAMOWIENIA (id tablicy zamowienia).
wykorzystuje wczesniej wyliczone funkcje dotyczace upustu oraz ceny samochodu. funkcja uwzglednia takze dodatkowo polise ubezpieczeniowa oraz uslugi dodatkowe,
ktore zostaly wybrane przez klienta skaldajac zamowienie - te dwie pozycje nie podlegaja rabatowi, sa swiadczone przez firmy zewnetrzne
ostateczna cena zostaje zaokraglona do pelnych setek zlotych (jest to marza salonu).
*/

CREATE OR REPLACE FUNCTION cena_zamowienia (
    numer   INT
) RETURN NUMBER IS
    wynik MODEL.CENA%type := 0;
    cena_ubezpieczenia   UBEZPIECZENIE.CENA%type := 0;
    dodatek PAKIET_DODATKOWY.CENA%type :=0;
-- begin dla ceny samochodu z rabatem
BEGIN
  -- begin dla ubezpieczenia
  BEGIN
      -- begin dla uslug dodatkowych
      BEGIN
          SELECT SUM(uslugi_dodatkowe.cena) into dodatek
          FROM zamowienie INNER JOIN  wybrane_uslugi
              ON zamowienie.id = wybrane_uslugi.zamowienie_id
              INNER JOIN uslugi_dodatkowe 
              ON uslugi_dodatkowe.id = wybrane_uslugi.uslugi_dodatkowe_id
          WHERE zamowienie.id = numer
          GROUP BY  zamowienie.id;
  
     --     dbms_output.put_line('cena dodatku to: ' ||  dodatek ||  ' PLN.');
      EXCEPTION
          WHEN no_data_found THEN
              dodatek := 0;
      END;
      SELECT ubezpieczenie.cena into  cena_ubezpieczenia
      FROM (SELECT  u.cena AS cena
              FROM zamowienie z, ubezpieczenie u
              WHERE z.ubezpieczenie_id = u.id AND z.id = numer ) ubezpieczenie;
  --    dbms_output.put_line('cena ubezpieczenia to: ' ||  cena_ubezpieczenia ||  ' PLN.');
  EXCEPTION
      WHEN no_data_found THEN
          cena_ubezpieczenia :=0;
  END;
wynik := dodatek + cena_ubezpieczenia + ( 1 - upust_zamowienia(numer) / 100 ) * cena_samochodu(numer);
wynik := round(wynik/100,0)*100;
RETURN wynik;
EXCEPTION
      WHEN no_data_found THEN
          return 0;
end;
/

-- sprawdzenie
declare
numer_zamowienia int :=12;
begin
dbms_output.put_line('cena samochodu '|| numer_zamowienia || ' to: ' || cena_samochodu(numer_zamowienia) || ' PLN.');
dbms_output.put_line('Wartosc upustu dla sprzedazy numer ' || numer_zamowienia || ' to: ' || upust_zamowienia(numer_zamowienia)|| '%.');
dbms_output.put_line('Wartosc sprzedazy dla zamowienia ' || numer_zamowienia || ' to: ' || cena_zamowienia(numer_zamowienia)|| ' PLN.');
end;
/

/* Funkcja 4:
funkcja zwraca informacje czy suma oplat wniesionych przez klientow dla danego zamowienia jest rowna cenie zamowienia
*/
create or replace function czy_oplacone_zamowienie (numer int) return boolean is
wynik boolean := false;
cena platnosc.kwota%type :=0;
begin
SELECT
    SUM(platnosc.kwota) into cena
FROM  platnosc INNER JOIN zamowienie
    ON  zamowienie.id = platnosc.zamowienie_id
WHERE   zamowienie.id = numer  
GROUP BY zamowienie.id;

--dbms_output.put_line('wplaty dokonano na: ' ||  platnosc ||  ' PLN.');
if (cena >= cena_zamowienia(numer)) then
  wynik := true;
end if;

return wynik;
exception 
  when no_data_found then return false;
end;
/

-- sprawdzenie
declare
numer_zamowienia int :=3;
begin
dbms_output.put_line('Wartosc sprzedazy dla zamowienia ' || numer_zamowienia || ' to: ' || cena_zamowienia(numer_zamowienia)|| ' PLN.');
if (czy_oplacone_zamowienie(numer_zamowienia)) then
dbms_output.put_line('Dokonano oplaty w calosci.');
else
dbms_output.put_line('Nie dokonano oplaty w calosci.');
end if;
end;
/

/* Funkcja 5
zwraca ilosc sprzedanych samochodow przez pracownika w stosunku do wszystkich zarejestrownych na niego zamowien zarowno zwiazanych
ze sprzedaza samochodu jak i tylko zakupieniem np. ubezpieczenia lub uslug dodatkowych
*/
create or replace function efektywnosc_pracownika(numer int) return number is
licznik number(4,2):=0;
mianownik number(4,2):=0;
begin
select count(*) into licznik from zamowienie z, samochod s where z.id = s.zamowienie_id
and z.sprzedawca_id = numer
group by z.SPRZEDAWCA_ID;
--dbms_output.put_line('licznik ' || licznik);
select count(*) into mianownik from zamowienie z 
where z.sprzedawca_id = numer
group by z.SPRZEDAWCA_ID;
--dbms_output.put_line('licznik ' || mianownik);
return round(licznik/mianownik,2);
EXCEPTION
  when no_data_found then
    RETURN 0;
end;
/
-- sprawdzenie
begin
dbms_output.put_line('Efektywnosc pracownika 9 to: ' || efektywnosc_pracownika(9));
end;
/

-- analogiczna funkcja jak Funkcja n 4 tylko zwraca informacje czy suma dokonanych wplat jest wieksza od wymaganej kwoty za zamowienie
-- w funkcji 4 bylo wieksza lub rowna
create or replace function sprawdz (numer int)  return boolean is
wynik boolean := false;
cena platnosc.kwota%type :=0;
begin
SELECT
    SUM(platnosc.kwota) into cena
FROM  platnosc INNER JOIN zamowienie
    ON  zamowienie.id = platnosc.zamowienie_id
WHERE   zamowienie.id = numer  
GROUP BY zamowienie.id;

--dbms_output.put_line('wplaty dokonano na: ' ||  platnosc ||  ' PLN.');
if (cena > cena_zamowienia(numer)) then
  wynik := true;
end if;

return wynik;
exception 
  when no_data_found then return false;
end;
/


-- Autor: Krzysztof Szarafiñski
-- nr albumu: 155441
-- Data: 12.01.2017

set serveroutput on
/* Procedua 1:
nadaje odpowiednie statusy dla kazdego zamowienia w zaleznosci od dokonanej platnosci oraz dnia odbioru:
1 - automatycznie jest nadawane dla zarejestrowanych zamowien
2 - jest nadawane dla zamowien ktore zostaly oplacone
3 - jest nadawane dla zamoien ktore zostaly oplacone oraz data odbioru juz przypadla (status do odbioru)
4 - jezeli zamowienie jest do odbioru, ale nei zostalo odebrane i minely 2 miesiace od daty odbioru to uznaje sie je jako nie odebrane
*/
create or replace procedure zmien_statusy_zamowienia is
cursor zamowienia is select z.id as numer, z.data_odbioru as odbior, z.status_zamowienia_id as status from zamowienie z 
    where z.status_zamowienia_id not in (5) for update;
begin
    for rekord in zamowienia loop
      if (czy_oplacone_zamowienie(rekord.numer)) then
        -- nadanie zamowieniu statusu "oplacone" jezeli data odbioru jeszcze nie minela
        update zamowienie set status_zamowienia_id = 2 where current of zamowienia;
          -- nadanie zamowieniu statusu "gotowe do odbioru" jezeli jest oplacone oraz data odbioru juz minela
        if rekord.odbior <= sysdate then
          update zamowienie set status_zamowienia_id = 3 where current of zamowienia;
        end if;
      end if;
    end loop;
    
    for rekord in zamowienia loop
      -- nadanie zamowienia statusu "nieodebrane" jezeli jest gotowe to odbioru i minely juz 2 miesiace od daty odbioru
      if (rekord.status = 3) and (add_months(rekord.odbior,2) <= sysdate) then
         update zamowienie set status_zamowienia_id = 4 where current of zamowienia;
      end if;
    end loop;
end;
/

create or replace view zamowienia_i_platnosci as 
select jeden.id as nr_zamowienia, 
cena_zamowienia(jeden.id) as cena, 
dwa.platnosc as platnosc, 
(cena_zamowienia(jeden.id)-dwa.platnosc) as do_zaplaty,
s.NAZWA as status
from  
  (select z.id as id, z.data_zawarcia as zawarcie, z.data_odbioru as odbior, z.status_zamowienia_id as status 
    from zamowienie z where z.status_zamowienia_id not in (5)) jeden 
full outer join 
  (SELECT SUM(platnosc.kwota) as platnosc, zamowienie.id as id
  FROM  platnosc INNER JOIN zamowienie ON  zamowienie.id = platnosc.zamowienie_id 
  GROUP BY zamowienie.id) dwa
on jeden.id = dwa.id, status_zamowienia s where s.ID=jeden.status order by nr_zamowienia, do_zaplaty ;
/
-- sprawdzenie
select * from zamowienia_i_platnosci;
exec zmien_statusy_zamowienia;
select * from zamowienia_i_platnosci;

/* Funkcja 2
nadaje odpowiednie statusy dla wniesionych platnosci:
1 - kazda zarejesrowana platnosc ma naday status "zaksiegowane"
jezeli jest nadplata to osatnia wplata ktora spowoowala nadplate otrzymuje status nr 2 "nadplata". w opisie sie pojawia kwota o nadplacie
doawany jest rekord z kwota jemna i przypisanem statusem nr 3 do zwrotu. w uwagach dodatkwoych jest informacja o kwocie nadplaty
*/

create or replace procedure zmien_statusy_platnosci as
cursor oplacone_zamowienia is select DISTINCT platnosc.zamowienie_id as zamowienie  from platnosc order by zamowienie;
begin
for rekord in oplacone_zamowienia loop
  if czy_oplacone_zamowienie(rekord.zamowienie) then
    declare
      cursor oplaty_zamowienia is 
        select platnosc.kwota as kwota, platnosc.klient_id as klient, platnosc.id as id, platnosc.RODZAJ_PLATNOSCI_ID as rodzaj
        from platnosc where platnosc.zamowienie_id = rekord.zamowienie for update;
      suma PLATNOSC.KWOTA%type :=0;
      cena_z PLATNOSC.KWOTA%type :=0;
      temp platnosc.kwota%type:=0;
    begin 
      select cena_zamowienia(rekord.zamowienie) into cena_z from dual;
      for oplata in oplaty_zamowienia loop
        temp := suma;
        suma := suma + oplata.kwota;
        if suma = cena_z then
          update platnosc set uwagi_dodatkowe = ('Ta wplata jest ostatnia wymagana. Dziekujemy') where current of oplaty_zamowienia;
        elsif suma > cena_z then
         --update platnosc set status_platnosci_id = 2 where current of oplaty_zamowienia;
          update platnosc set uwagi_dodatkowe = ('Ta wplata jest za wysoka o kwote: ' || (suma - cena_z) ) where current of oplaty_zamowienia;
          update platnosc set kwota = (cena_z-temp) where current of oplaty_zamowienia;
          insert into platnosc (DATA_DOKONANIA, KWOTA, UWAGI_DODATKOWE, STATUS_PLATNOSCI_ID, RODZAJ_PLATNOSCI_ID, KLIENT_ID, ZAMOWIENIE_ID) 
            values (sysdate,(suma-cena_z),('Kwota nadplacona: ' ||(suma-cena_z)|| ' dotyczy platnosci nr: ' || oplata.id), 
                    2,oplata.rodzaj,oplata.klient, rekord.zamowienie);
          insert into platnosc (DATA_DOKONANIA, KWOTA, UWAGI_DODATKOWE, STATUS_PLATNOSCI_ID, RODZAJ_PLATNOSCI_ID, KLIENT_ID, ZAMOWIENIE_ID) 
            values (sysdate,(cena_z-suma),('Kwota nadplacona, do zwrotu: ' ||(suma-cena_z)|| ' dotyczy platnosci nr: ' || oplata.id), 
                    3,4,oplata.klient, rekord.zamowienie);
          suma := cena_z;
        end if;
      end loop;
    end;  
  end if;
end loop;
end;
/

create or replace view wyciag_z_konta as
select  p.zamowienie_id as nr_zamowienia, p.id as nr_platnosci, s.nazwa as status_oplaty, p.uwagi_dodatkowe as opis,
cena_zamowienia(p.zamowienie_id) as cena_zamowieni, p.kwota as kwota
from 
platnosc p, STATUS_PLATNOSCI s where s.id = p.STATUS_PLATNOSCI_ID order by nr_zamowienia, nr_platnosci;
/

-- sprawdzenie
select * from wyciag_z_konta;
exec zmien_statusy_platnosci;
select * from wyciag_z_konta;

/* Procedura 3
w zaleznosci od podanego parametru zmienia pensje pracownika w zaleznosci od jego efektywnosci.
parametr wskazuje jak duza powinna byc efektywnosc pracownika by zwiekszyc jego wynagrodzenie o 5%
*/

create or replace procedure zmien_wynagrodzenie(numer number) is
pensja SPRZEDAWCA.PENSJA%type := 0;
cursor pracownicy is select sprzedawca.id as id, sprzedawca.pensja as pensja from sprzedawca for update;
begin
for rekord in pracownicy loop
  if (efektywnosc_pracownika(rekord.id) > numer) then 
    update sprzedawca set pensja = round((rekord.pensja * 1.05),2) where current of pracownicy;
  end if;
end loop;
end;
/

-- sprawdzenie
create or replace view pracownicy as select p.imie,p.nazwisko, s.nazwa, p.PENSJA, efektywnosc_pracownika(p.id) as efektywnosc 
from SPRZEDAWCA p, stanowisko s where p.stanowisko_id = s.id;
/
select * from pracownicy;
exec zmien_wynagrodzenie(1);
select * from pracownicy;


/*Procedura 4
generuje format maila ktory powinien wyslac pracownik do kupujacego by odebral swoje zamowienie
*/
create or replace procedure wyslij_mail is
mail klient.email%type;
czy_poczta boolean := true;
dane_klienta klient%rowtype;
adres_klienta adres%rowtype;
pracownik sprzedawca%rowtype;
cursor nieodebrane is select z.ID ,z.NR_UMOWY ,z.DATA_ZAWARCIA ,z.DATA_ODBIORU ,z.KLIENT_ID ,z.SPRZEDAWCA_ID ,z.STATUS_ZAMOWIENIA_ID ,z.UBEZPIECZENIE_ID
from zamowienie z where z.status_zamowienia_id = 4;
begin
  for rekord in nieodebrane loop
select k.id, k.plec, k.imie, k.nazwisko, k.email, k.adres_id into dane_klienta  from klient k, zamowienie where k.id = zamowienie.klient_id and zamowienie.id = rekord.id;
select ID ,ULICA ,MIASTO ,NR_DOMU ,NR_MIESZKANIA  into adres_klienta from adres where adres.id = dane_klienta.id;
select s.ID ,s.IMIE ,s.NAZWISKO ,s.EMAIL ,s.ODDZIAL_ID ,s.STANOWISKO_ID ,s.PENSJA  into pracownik from sprzedawca s where s.id = rekord.sprzedawca_id;
    begin
      mail := dane_klienta.email;
      czy_poczta := false;
    EXCEPTION
          WHEN no_data_found THEN
            czy_poczta := true;
    end;
      -- kiedy klient nie ma maila to zostanie wyslany mu list polecony na adres zamieszkania 
    if (czy_poczta) then
      if (lower(dane_klienta.plec)='k') then
        dbms_output.put_line('*************************');
        dbms_output.put_line('Pani ' || dane_klienta.imie || ' ' || dane_klienta.nazwisko || ',' );
        dbms_output.put_line('ul. ' || adres_klienta.ulica || ' ' || adres_klienta.nr_domu || ' ' || nvl(adres_klienta.nr_mieszkania,''));
        dbms_output.put_line( adres_klienta.miasto);
        dbms_output.put_line(' ');
        dbms_output.put_line('Zwracam sie z prosba by odebrac swoje zamowienie zawarte w oparciu o umowe nr ' || rekord.nr_umowy || ' z dnia ' || 
        to_char(rekord.data_zawarcia, 'DD-MM-YYYY') || '.');
        dbms_output.put_line(' ');
        dbms_output.put_line('z wyrazami szacunku,');
        dbms_output.put_line(pracownik.imie || ' ' || pracownik.nazwisko);
        dbms_output.put_line('*************************');
        dbms_output.put_line('');
      else 
        dbms_output.put_line('*************************');
        dbms_output.put_line('Pan ' || dane_klienta.imie || ' ' || dane_klienta.nazwisko || ',' );
        dbms_output.put_line('ul. ' || adres_klienta.ulica || ' ' || adres_klienta.nr_domu || ' ' || nvl(adres_klienta.nr_mieszkania,''));
        dbms_output.put_line( adres_klienta.miasto);
        dbms_output.put_line('Zwracam sie z prosba by odebrac swoje zamowienie zawarte w oparciu o umowe nr ' || rekord.nr_umowy || ' z dnia ' || 
        to_char(rekord.data_zawarcia, 'DD-MM-YYYY') || '.');
        dbms_output.put_line(' ');
        dbms_output.put_line('z wyrazami szacunku,');
        dbms_output.put_line(pracownik.imie || ' ' || pracownik.nazwisko);
        dbms_output.put_line('*************************');
        dbms_output.put_line('');
      end if;
    else
      if (lower(dane_klienta.plec)='k') then
        dbms_output.put_line('*************************');
        dbms_output.put_line('OD: ' || pracownik.email);
        dbms_output.put_line('DO: ' || dane_klienta.email);
        dbms_output.put_line('Pani ' || dane_klienta.imie || ' ' || dane_klienta.nazwisko || ',' );
        dbms_output.put_line('Zwracam sie z prosba by odebrac swoje zamowienie zawarte w oparciu o umowe nr ' || rekord.nr_umowy || ' z dnia ' || 
        to_char(rekord.data_zawarcia, 'DD-MM-YYYY') || '.');
        dbms_output.put_line(' ');
        dbms_output.put_line('z wyrazami szacunku,');
        dbms_output.put_line(pracownik.imie || ' ' || pracownik.nazwisko);
        dbms_output.put_line('*************************');
        dbms_output.put_line('');
      else 
        dbms_output.put_line('*************************');
        dbms_output.put_line('OD: ' || pracownik.email);
        dbms_output.put_line('DO: ' || dane_klienta.email);
        dbms_output.put_line('Pan ' || dane_klienta.imie || ' ' || dane_klienta.nazwisko || ',' );
        dbms_output.put_line('Zwracam sie z prosba by odebrac swoje zamowienie zawarte w oparciu o umowe nr ' || rekord.nr_umowy || ' z dnia ' || 
        to_char(rekord.data_zawarcia, 'DD-MM-YYYY') || '.');
        dbms_output.put_line(' ');
        dbms_output.put_line('z wyrazami szacunku,');
        dbms_output.put_line(pracownik.imie || ' ' || pracownik.nazwisko);
        dbms_output.put_line('*************************');
        dbms_output.put_line('');
      end if;
    end if;
  end loop;
end;
/

-- sprawdzenie
exec wyslij_mail;

/* Procedura 5:
w przypadku podpisania aneksu do umowy zmieniajacego samochod jaki ma byc objety umowa, procedura dokonuje zmiany przypisania numeru zamowienia
do odpowiedniego samochodu. jako argument podaje sie numer zamowienia oraz nr katalogowy samochodu (ID samochodu) jaki ma byc uwzgledniony w zamowieniu
*/
create or replace procedure aneks(nr_zamowienia number, nr_auta number) is
pojazd number;
cursor zamowione_auta is select s.zamowienie_id from samochod s where s.ZAMOWIENIE_ID = nr_zamowienia for update;
umowa zamowienie.nr_umowy%type;
begin
select z.nr_umowy into umowa from zamowienie z where z.id = nr_zamowienia;
select nvl(s.ZAMOWIENIE_ID,0)  into pojazd from samochod s where s.id = nr_auta;
-- sprawdzamy czy wyrane auto jest dostepne
  if (pojazd = 0) then
    -- jezeli jest dostepne to zerujemy wszystkie zamowione samochody w danym zamowieniu
    for zamowienie in zamowione_auta loop
      update samochod set zamowienie_id = null where current of zamowione_auta;
    end loop;
    -- dodajemy wybrany samochod do zamowienia
    update samochod set zamowienie_id = nr_zamowienia where id = nr_auta;
    update zamowienie set nr_umowy = (umowa || '/a') where id = nr_zamowienia;
  else
    RAISE_APPLICATION_ERROR(-20000, 'Wybrany samochod: ' || nr_auta || ' jest juz przypisany do zamowienia: ' || pojazd || '.');
  end if;
end;
/
-- sprawdzenie
exec aneks(15,30);



-- Autor: Krzysztof Szarafiñski
-- nr albumu: 155441
-- Data: 12.01.2017

set serveroutput on
/* Wyzwalacz 1:
zapewnia by dodana nowa klasa wyposazenia podstawowego byla pisana z wielkiej litery
*/
create or replace trigger klasa_wielka_litera before insert or update on klasa_wyposazenia for each row
begin
if inserting then
:new.nazwa := upper(:new.nazwa);
elsif updating then
:new.nazwa := upper(:new.nazwa);
end if;
end;
/
-- sprawdzenie
select * from klasa_wyposazenia;
insert into klasa_wyposazenia(nazwa,opis) values ('Buisness', 'buisness, floty samochodwe');
select * from klasa_wyposazenia;

/* Wyzwalacz 2:
uniemozliwia usuniecie samochodu z bazy danych jezeli jest on zamowiony 
*/
create or replace trigger zamowiony_samochod before delete on samochod for each row
begin
  if (:old.zamowienie_id is not null) then
      RAISE_APPLICATION_ERROR(-20001, 'Samochod jest zamowiony. Nie mozna dokonac jego usuniecia.');
  end if;
end;
/

-- sprawdzenie
delete from samochod where id = 14;

/* Wyzwalacz 3:
sprawdza czy dana osoba jest juz w bazie: imie oraz naziwsko i adres zameiszkania. jezeli jest to uniemozlwia jej dodanie
*/
create or replace trigger duplikat_osoby before insert on klient for each row
declare
licznik int;
begin
select count(*) into licznik from klient where lower(imie) = lower(:new.imie) and lower(plec) = lower(:new.plec) 
  and lower(nazwisko)=lower(:new.nazwisko) and adres_id = :new.adres_id;
if inserting then
  if (licznik >0) then
    RAISE_APPLICATION_ERROR(-20002, 'Osoba znajduje siê juz w bazie.');
  end if;
end if;
end;
/

-- sprawdzenie
  insert into klient (plec, imie, nazwisko, adres_id) values ('k',	'Janina'	,'Zlota',	9);
  
/* wyzwalacz 4:
uniemozliwia wstawienie platnosci dla umow ktore nie zostay zawarte
*/
create or replace trigger wstaw_platnosc before insert on platnosc for each row
declare
zawarcie zamowienie.data_zawarcia%type;
begin
  begin
    select z.data_zawarcia into zawarcie from zamowienie z where z.ID=:new.zamowienie_id;
  exception
    WHEN no_data_found THEN
        zawarcie := sysdate;
  end;
  if (:new.data_dokonania < zawarcie) then
    RAISE_APPLICATION_ERROR(-20003, 'Wplata nie dotyczy zawartej umowy. Brak mozliwosci rejestracji.');
  end if;
end;
/

-- sprawdzenie
insert into platnosc (data_dokonania, kwota, klient_id,zamowienie_id) values (to_date('2016-10-30','yyyy-mm-dd'),1000,2,1);

/* wyzwalacz 5:
przy zmianie statusu zamowienia na odebrane zwalnia dane modele z zamowienia
*/
create or replace trigger odebranie_zamowienia after update on zamowienie for each row when (new.status_zamowienia_id = 5) 
declare
  cursor samochody is select zamowienie_id from samochod where ZAMOWIENIE_ID=:old.id;
  zamowienie_nr samochod.id%type;
begin
open samochody;
loop
  fetch  samochody into zamowienie_nr;
  update samochod set ZAMOWIENIE_ID = null where zamowienie_id = zamowienie_nr;
  exit when samochody%notfound;
end loop;
close samochody;
end;
/
-- sprawdzenie
update zamowienie set status_zamowienia_id = 5 where id = 15;



-- Autor: Krzysztof Szarafiñski
-- nr albumu: 155441
-- Data: 12.01.2017

-- ponizszy widok dziala dopiero po zaladowaniu procedur i funkcji

/* select nr 1: 
zwraca informacje o numerze zamwienia, jego cenie oraz sumie dokonanych platnosci. dodatkowo wyliczana jest kwota nadplaty.
kwota dodatnia nadplaty to nadplata,
kwota ujemna nadplatyto kwota ktora musi byc jeszcze wplcona
wartosci null to znaczy ze nie nie dokonano wplaty za dane zamowienie
*/
create or replace view oplaty_za_zamowienie as
select jeden.id as nr_zamowienia, cena_zamowienia(jeden.id) as cena, sum( dwa.platnosc )as platnosc, (sum( dwa.platnosc )-cena_zamowienia(jeden.id)) as nadplata
from  
  (select z.id as id, z.data_zawarcia as zawarcie, z.data_odbioru as odbior, z.status_zamowienia_id as status from zamowienie z) jeden 
full outer join 
  (SELECT SUM(platnosc.kwota) as platnosc, zamowienie.id as id, platnosc.id as nr_platnosci
  FROM  platnosc INNER JOIN zamowienie ON  zamowienie.id = platnosc.zamowienie_id 
  GROUP BY zamowienie.id, platnosc.id) dwa 
on jeden.id = dwa.id group by jeden.id order by nr_zamowienia;
/

select * from oplaty_za_zamowienie;

/* Select 2:
informacje o samochodach w magazyniej: marka, model, rok produkcji, liczba drzwi, kolor oraz cena
*/
create or replace view samochody_w_magazynie as select marka.nazwa as marka, model.nazwa as model, model.rok_produkcji as rok_produkcji, model.liczba_drzwi, 
k.nazwa as klasa, kolor.odcien as barwa, round(cena_samochodu(samochod.id),-2) as cena
from model 
inner join klasa_wyposazenia k
on k.id = model.KLASA_WYPOSAZENIA_ID 
inner join marka 
on model.MARKA_ID=marka.id
inner join samochod
on model.id = samochod.MODEL_ID
inner join kolor
on samochod.kolor_id = kolor.id
order by marka, model, rok_produkcji;

-- sprawdzenie
select * from samochody_w_magazynie;


-- Autor: Krzysztof Szarafiñski
-- nr albumu: 155441
-- Data: 12.01.2017

set serveroutput on

create or replace package pakiecik is
-- funkcje
function cena_samochodu(numer int) return number;
function upust_zamowienia(numer int) return number;
FUNCTION cena_zamowienia (  numer   INT ) RETURN NUMBER;
function czy_oplacone_zamowienie (numer int) return boolean ;
function efektywnosc_pracownika(numer int) return number ;

-- procedury
procedure zmien_statusy_zamowienia;
procedure zmien_statusy_platnosci;
procedure zmien_wynagrodzenie(numer number);
procedure wyslij_mail;
procedure aneks(nr_zamowienia number, nr_auta number);

-- przeciazona funkcja i procedura
function efektywnosc_pracownika(numer int, od_dnia date, do_dnia date) return number;
procedure zmien_wynagrodzenie(numer number, nr_stanowiska number);

end pakiecik;
/
create or replace package body pakiecik is
--funkcje
function cena_samochodu(numer int) return number is
cursor ceny is 
select jeden.model, jeden.kolor, jeden.silnik, nvl(dwa.cena,0) as pakiet from
  (select s.id as numer, model.cena as model, kolor.cena as kolor, silnik.cena as silnik
  from model, kolor, silnik, samochod s 
  where s.model_id=model.id and s.silnik_id=silnik.id and s.kolor_id=kolor.id and s.id = numer) jeden 
left join
  (select s.id as numer, p.cena as cena 
    from samochod s, wybrane_pakiety w, pakiet_dodatkowy p 
    where s.id = w.SAMOCHOD_ID and p.id = w.PAKIET_DODATKOWY_ID and s.id = numer) dwa 
on dwa.numer=jeden.numer;
cena MODEL.CENA%type := 0;
begin
for rekord in ceny loop
  cena := cena + rekord.silnik + rekord.kolor + rekord.model+ rekord.pakiet;
end loop;
return cena;
exception
  when no_data_found then
    return 0;
end;

-- druga
function upust_zamowienia(numer int) return number is
wynik UPUST.WYSOKOSC%type :=0;
begin
SELECT sum(upust.wysokosc) into wynik
FROM  upust  INNER JOIN upust_oddzialu
    ON upust.id = upust_oddzialu.upust_id
    INNER JOIN oddzial
    ON oddzial.id = upust_oddzialu.oddzial_id
    INNER JOIN sprzedawca
    ON oddzial.id = sprzedawca.oddzial_id
    INNER JOIN zamowienie 
    ON sprzedawca.id = zamowienie.sprzedawca_id
WHERE zamowienie.data_zawarcia between upust.data_start and UPUST.DATA_KONIEC and zamowienie.id = numer
GROUP BY zamowienie.id;

if wynik >=20 then
    return 20;
ELSE
    return wynik;
end if;
exception
  when no_data_found then
    return 0;
end;


FUNCTION cena_zamowienia (
    numer   INT
) RETURN NUMBER IS
    wynik MODEL.CENA%type := 0;
    cena_ubezpieczenia   UBEZPIECZENIE.CENA%type := 0;
    dodatek PAKIET_DODATKOWY.CENA%type :=0;
-- begin dla ceny samochodu z rabatem
BEGIN
  -- begin dla ubezpieczenia
  BEGIN
      -- begin dla uslug dodatkowych
      BEGIN
          SELECT SUM(uslugi_dodatkowe.cena) into dodatek
          FROM zamowienie INNER JOIN  wybrane_uslugi
              ON zamowienie.id = wybrane_uslugi.zamowienie_id
              INNER JOIN uslugi_dodatkowe 
              ON uslugi_dodatkowe.id = wybrane_uslugi.uslugi_dodatkowe_id
          WHERE zamowienie.id = numer
          GROUP BY  zamowienie.id;
  
     --     dbms_output.put_line('cena dodatku to: ' ||  dodatek ||  ' PLN.');
      EXCEPTION
          WHEN no_data_found THEN
              dodatek := 0;
      END;
      SELECT ubezpieczenie.cena into  cena_ubezpieczenia
      FROM (SELECT  u.cena AS cena
              FROM zamowienie z, ubezpieczenie u
              WHERE z.ubezpieczenie_id = u.id AND z.id = numer ) ubezpieczenie;
  --    dbms_output.put_line('cena ubezpieczenia to: ' ||  cena_ubezpieczenia ||  ' PLN.');
  EXCEPTION
      WHEN no_data_found THEN
          cena_ubezpieczenia :=0;
  END;
wynik := dodatek + cena_ubezpieczenia + ( 1 - upust_zamowienia(numer) / 100 ) * cena_samochodu(numer);
wynik := round(wynik/100,0)*100;
RETURN wynik;
EXCEPTION
      WHEN no_data_found THEN
          return 0;
end;



-- funkcja 4
function czy_oplacone_zamowienie (numer int) return boolean is
wynik boolean := false;
cena platnosc.kwota%type :=0;
begin
SELECT
    SUM(platnosc.kwota) into cena
FROM  platnosc INNER JOIN zamowienie
    ON  zamowienie.id = platnosc.zamowienie_id
WHERE   zamowienie.id = numer  
GROUP BY zamowienie.id;

--dbms_output.put_line('wplaty dokonano na: ' ||  platnosc ||  ' PLN.');
if (cena >= cena_zamowienia(numer)) then
  wynik := true;
end if;

return wynik;
exception 
  when no_data_found then return false;
end;

-- funckaj 5
function efektywnosc_pracownika(numer int) return number is
licznik number(4,2):=0;
mianownik number(4,2):=0;
begin
select count(*) into licznik from zamowienie z, samochod s where z.id = s.zamowienie_id
and z.sprzedawca_id = numer
group by z.SPRZEDAWCA_ID;
--dbms_output.put_line('licznik ' || licznik);
select count(*) into mianownik from zamowienie z 
where z.sprzedawca_id = numer
group by z.SPRZEDAWCA_ID;
--dbms_output.put_line('licznik ' || mianownik);
return round(licznik/mianownik,2);
EXCEPTION
  when no_data_found then
    RETURN 0;
end;



-- PROCEDURY -----------

-- procedura 1
procedure zmien_statusy_zamowienia is
cursor zamowienia is select z.id as numer, z.data_odbioru as odbior, z.status_zamowienia_id as status from zamowienie z 
    where z.status_zamowienia_id not in (5) for update;
begin
    for rekord in zamowienia loop
      if (czy_oplacone_zamowienie(rekord.numer)) then
        -- nadanie zamowieniu statusu "oplacone" jezeli data odbioru jeszcze nie minela
        update zamowienie set status_zamowienia_id = 2 where current of zamowienia;
          -- nadanie zamowieniu statusu "gotowe do odbioru" jezeli jest oplacone oraz data odbioru juz minela
        if rekord.odbior <= sysdate then
          update zamowienie set status_zamowienia_id = 3 where current of zamowienia;
        end if;
      end if;
    end loop;
    
    for rekord in zamowienia loop
      -- nadanie zamowienia statusu "nieodebrane" jezeli jest gotowe to odbioru i minely juz 2 miesiace od daty odbioru
      if (rekord.status = 3) and (add_months(rekord.odbior,2) <= sysdate) then
         update zamowienie set status_zamowienia_id = 4 where current of zamowienia;
      end if;
    end loop;
end;

-- procedura 2
procedure zmien_statusy_platnosci as
cursor oplacone_zamowienia is select DISTINCT platnosc.zamowienie_id as zamowienie  from platnosc order by zamowienie;
begin
for rekord in oplacone_zamowienia loop
  if czy_oplacone_zamowienie(rekord.zamowienie) then
    declare
      cursor oplaty_zamowienia is 
        select platnosc.kwota as kwota, platnosc.klient_id as klient, platnosc.id as id, platnosc.RODZAJ_PLATNOSCI_ID as rodzaj
        from platnosc where platnosc.zamowienie_id = rekord.zamowienie for update;
      suma PLATNOSC.KWOTA%type :=0;
      cena_z PLATNOSC.KWOTA%type :=0;
      temp platnosc.kwota%type:=0;
    begin 
      select cena_zamowienia(rekord.zamowienie) into cena_z from dual;
      for oplata in oplaty_zamowienia loop
        temp := suma;
        suma := suma + oplata.kwota;
        if suma > cena_z then
         --update platnosc set status_platnosci_id = 2 where current of oplaty_zamowienia;
          update platnosc set uwagi_dodatkowe = ('Ta wplata jest za wysoka o kwote: ' || (suma - cena_z) ) where current of oplaty_zamowienia;
          update platnosc set kwota = (cena_z-temp) where current of oplaty_zamowienia;
          insert into platnosc (DATA_DOKONANIA, KWOTA, UWAGI_DODATKOWE, STATUS_PLATNOSCI_ID, RODZAJ_PLATNOSCI_ID, KLIENT_ID, ZAMOWIENIE_ID) 
            values (sysdate,(suma-cena_z),('Kwota nadplacona: ' ||(suma-cena_z)|| ' dotyczy platnosci nr: ' || oplata.id), 
                    2,oplata.rodzaj,oplata.klient, rekord.zamowienie);
          insert into platnosc (DATA_DOKONANIA, KWOTA, UWAGI_DODATKOWE, STATUS_PLATNOSCI_ID, RODZAJ_PLATNOSCI_ID, KLIENT_ID, ZAMOWIENIE_ID) 
            values (sysdate,(cena_z-suma),('Kwota nadplacona, do zwrotu: ' ||(suma-cena_z)|| ' dotyczy platnosci nr: ' || oplata.id), 
                    3,4,oplata.klient, rekord.zamowienie);
          suma := cena_z;
        elsif suma = cena_z then
          update platnosc set uwagi_dodatkowe = ('Ta wplata jest ostatnia wymagana. Dziekujemy') where current of oplaty_zamowienia;
        end if;
      end loop;
    end;  
  end if;
end loop;
end;

-- procedura 3

procedure zmien_wynagrodzenie(numer number) is
pensja SPRZEDAWCA.PENSJA%type := 0;
cursor pracownicy is select sprzedawca.id as id, sprzedawca.pensja as pensja from sprzedawca for update;
begin
for rekord in pracownicy loop
  if (efektywnosc_pracownika(rekord.id) > numer) then 
    update sprzedawca set pensja = round((rekord.pensja * 1.05),2) where current of pracownicy;
  end if;
end loop;
end;


-- procedura 4

procedure wyslij_mail is
mail klient.email%type;
czy_poczta boolean := true;
dane_klienta klient%rowtype;
adres_klienta adres%rowtype;
pracownik sprzedawca%rowtype;
cursor nieodebrane is select z.ID ,z.NR_UMOWY ,z.DATA_ZAWARCIA ,z.DATA_ODBIORU ,z.KLIENT_ID ,z.SPRZEDAWCA_ID ,z.STATUS_ZAMOWIENIA_ID ,z.UBEZPIECZENIE_ID
from zamowienie z where z.status_zamowienia_id = 4;
begin
  for rekord in nieodebrane loop
select k.id, k.plec, k.imie, k.nazwisko, k.email, k.adres_id into dane_klienta  from klient k, zamowienie where k.id = zamowienie.klient_id and zamowienie.id = rekord.id;
select ID ,ULICA ,MIASTO ,NR_DOMU ,NR_MIESZKANIA  into adres_klienta from adres where adres.id = dane_klienta.id;
select s.ID ,s.IMIE ,s.NAZWISKO ,s.EMAIL ,s.ODDZIAL_ID ,s.STANOWISKO_ID ,s.PENSJA  into pracownik from sprzedawca s where s.id = rekord.sprzedawca_id;
    begin
      mail := dane_klienta.email;
      czy_poczta := false;
    EXCEPTION
          WHEN no_data_found THEN
            czy_poczta := true;
    end;
      -- kiedy klient nie ma maila to zostanie wyslany mu list polecony na adres zamieszkania 
    if (czy_poczta) then
      if (lower(dane_klienta.plec)='k') then
        dbms_output.put_line('*************************');
        dbms_output.put_line('Pani ' || dane_klienta.imie || ' ' || dane_klienta.nazwisko || ',' );
        dbms_output.put_line('ul. ' || adres_klienta.ulica || ' ' || adres_klienta.nr_domu || ' ' || nvl(adres_klienta.nr_mieszkania,''));
        dbms_output.put_line( adres_klienta.miasto);
        dbms_output.put_line(' ');
        dbms_output.put_line('Zwracam siê z proba by odebraæ swoje zamowienie zawarte w oparciu o umowe nr ' || rekord.nr_umowy || ' z dnia ' || 
        to_char(rekord.data_zawarcia, 'DD-MM-YYYY') || '.');
        dbms_output.put_line(' ');
        dbms_output.put_line('z wyrazami szacunku,');
        dbms_output.put_line(pracownik.imie || ' ' || pracownik.nazwisko);
        dbms_output.put_line('*************************');
        dbms_output.put_line('');
      else 
        dbms_output.put_line('*************************');
        dbms_output.put_line('Pan ' || dane_klienta.imie || ' ' || dane_klienta.nazwisko || ',' );
        dbms_output.put_line('ul. ' || adres_klienta.ulica || ' ' || adres_klienta.nr_domu || ' ' || nvl(adres_klienta.nr_mieszkania,''));
        dbms_output.put_line( adres_klienta.miasto);
        dbms_output.put_line('Zwracam siê z proba by odebraæ swoje zamowienie zawarte w oparciu o umowe nr ' || rekord.nr_umowy || ' z dnia ' || 
        to_char(rekord.data_zawarcia, 'DD-MM-YYYY') || '.');
        dbms_output.put_line(' ');
        dbms_output.put_line('z wyrazami szacunku,');
        dbms_output.put_line(pracownik.imie || ' ' || pracownik.nazwisko);
        dbms_output.put_line('*************************');
        dbms_output.put_line('');
      end if;
    else
      if (lower(dane_klienta.plec)='k') then
        dbms_output.put_line('*************************');
        dbms_output.put_line('OD: ' || pracownik.email);
        dbms_output.put_line('DO: ' || dane_klienta.email);
        dbms_output.put_line('Pani ' || dane_klienta.imie || ' ' || dane_klienta.nazwisko || ',' );
        dbms_output.put_line('Zwracam siê z proba by odebraæ swoje zamowienie zawarte w oparciu o umowe nr ' || rekord.nr_umowy || ' z dnia ' || 
        to_char(rekord.data_zawarcia, 'DD-MM-YYYY') || '.');
        dbms_output.put_line(' ');
        dbms_output.put_line('z wyrazami szacunku,');
        dbms_output.put_line(pracownik.imie || ' ' || pracownik.nazwisko);
        dbms_output.put_line('*************************');
        dbms_output.put_line('');
      else 
        dbms_output.put_line('*************************');
        dbms_output.put_line('OD: ' || pracownik.email);
        dbms_output.put_line('DO: ' || dane_klienta.email);
        dbms_output.put_line('Pan ' || dane_klienta.imie || ' ' || dane_klienta.nazwisko || ',' );
        dbms_output.put_line('Zwracam siê z proba by odebraæ swoje zamowienie zawarte w oparciu o umowe nr ' || rekord.nr_umowy || ' z dnia ' || 
        to_char(rekord.data_zawarcia, 'DD-MM-YYYY') || '.');
        dbms_output.put_line(' ');
        dbms_output.put_line('z wyrazami szacunku,');
        dbms_output.put_line(pracownik.imie || ' ' || pracownik.nazwisko);
        dbms_output.put_line('*************************');
        dbms_output.put_line('');
      end if;
    end if;
  end loop;
end;


-- procedura 5
procedure aneks(nr_zamowienia number, nr_auta number) is
pojazd number;
cursor zamowione_auta is select s.zamowienie_id from samochod s where s.ZAMOWIENIE_ID = nr_zamowienia for update;
umowa zamowienie.nr_umowy%type;
begin
select z.nr_umowy into umowa from zamowienie z where z.id = nr_zamowienia;
select nvl(s.ZAMOWIENIE_ID,0)  into pojazd from samochod s where s.id = nr_auta;
-- sprawdzamy czy wyrane auto jest dostepne
  if (pojazd = 0) then
    -- jezeli jest dostepne to zerujemy wszystkie zamowione samochody w danym zamowieniu
    for zamowienie in zamowione_auta loop
      update samochod set zamowienie_id = null where current of zamowione_auta;
    end loop;
    -- dodajemy wybrany samochod do zamowienia
    update samochod set zamowienie_id = nr_zamowienia where id = nr_auta;
    update zamowienie set nr_umowy = (umowa || '/a') where id = nr_zamowienia;
  else
    RAISE_APPLICATION_ERROR(-20000, 'Wybrany samochod: ' || nr_auta || ' jest juz przypisany do zamowienia: ' || pojazd || '.');
  end if;
end;



----------------- przeciazona funkcja i procedura
-- funkcja
-- jako przeciazenie podaje sie parametr OD i DO jako definujace w jakim okresie czasu ma liczona byc efektywnosc dla danego pracownika
function efektywnosc_pracownika(numer int, od_dnia date, do_dnia date) return number is
licznik number(4,2):=0;
mianownik number(4,2):=0;
begin
select count(*) into licznik from zamowienie z, samochod s where z.id = s.zamowienie_id and z.DATA_ZAWARCIA between od_dnia and do_dnia
and z.sprzedawca_id = numer
group by z.SPRZEDAWCA_ID;
--dbms_output.put_line('licznik ' || licznik);
select count(*) into mianownik from zamowienie z 
where z.sprzedawca_id = numer
group by z.SPRZEDAWCA_ID;
--dbms_output.put_line('licznik ' || mianownik);
return round(licznik/mianownik,2);
EXCEPTION
  when no_data_found then
    RETURN 0;
end;


-- procedura
-- przeciazenie polega na tym, ze wyliczana jest efektywnosc dla pracownika ktorego stanowisko definiuje sie w dodatkwoym prametrze
-- jako parametr podaje sie id stanowiska
procedure zmien_wynagrodzenie(numer number, nr_stanowiska number) is
pensja SPRZEDAWCA.PENSJA%type := 0;
cursor pracownicy is select sprzedawca.id as id, sprzedawca.pensja as pensja from sprzedawca where sprzedawca.stanowisko_id = nr_stanowiska for update;
begin
for rekord in pracownicy loop
  if (efektywnosc_pracownika(rekord.id) > numer) then 
    update sprzedawca set pensja = round((rekord.pensja * 1.05),2) where current of pracownicy;
  end if;
end loop;
end;




end pakiecik;
/




-- sprawdzenie
declare
numer_zamowienia int :=12;
begin
--funkcja 1
dbms_output.put_line('cena samochodu 15 to: ' || pakiecik.cena_samochodu(15) || ' PLN.');
-- funkcja 2
dbms_output.put_line('Wartosc upustu dla sprzedazy numer 5: ' || pakiecik.upust_zamowienia(5)|| '%.');
-- funkcja 3
dbms_output.put_line('cena samochodu '|| numer_zamowienia || ' to: ' || pakiecik.cena_samochodu(numer_zamowienia) || ' PLN.');
dbms_output.put_line('Wartosc upustu dla sprzedazy numer ' || numer_zamowienia || ' to: ' || pakiecik.upust_zamowienia(numer_zamowienia)|| '%.');
dbms_output.put_line('Wartosc sprzeda¿y dla zamowienia ' || numer_zamowienia || ' to: ' || pakiecik.cena_zamowienia(numer_zamowienia)|| ' PLN.');
-- funkcja 4
numer_zamowienia := 3;
dbms_output.put_line('Wartosc sprzeda¿y dla zamowienia ' || numer_zamowienia || ' to: ' || pakiecik.cena_zamowienia(numer_zamowienia)|| ' PLN.');
if (pakiecik.czy_oplacone_zamowienie(numer_zamowienia)) then
dbms_output.put_line('Dokonano oplaty w calosci.');
else
dbms_output.put_line('Nie dokonano oplaty w calosci.');
end if;
-- funkcja 5
dbms_output.put_line('Efektywnoæ pracownika 9 to: ' || pakiecik.efektywnosc_pracownika(9));
end;
/

-- sprawdzenie dla procdury 1
select * from zamowienia_i_platnosci;
begin
pakiecik.zmien_statusy_zamowienia;
end;
/
select * from zamowienia_i_platnosci;


-- sprawdzenie dla procedury 2
begin 
pakiecik.zmien_statusy_platnosci;
end;
/
select * from oplaty_za_zamowienie;

-- sprawdzenie dla procedury 3
BEGIN
pakiecik.zmien_wynagrodzenie(1);
end;
/
select * from pracownicy;


-- sprawdzenie proceudry 4
begin
pakiecik.wyslij_mail;
end;
/


-- sprawdzenie dla procdudry 5
begin
pakiecik.aneks(15,30);
end;
/


-- sprawdzenie dla przeciazonej funkcji 5
begin
dbms_output.put_line('Efektywnoæ pracownika 1 to: ' || pakiecik.efektywnosc_pracownika(1, to_date('2014','yyyy'), to_date('2015','yyyy') ) );
end;
/

-- sprawdzenie dla przeciazonej procedury 3
BEGIN
pakiecik.zmien_wynagrodzenie(1, 4);
end;
/
select * from pracownicy;

