-- Generated by Oracle SQL Developer Data Modeler 4.2.0.917
-- Autor: Krzysztof Szarafiñski
-- nr albumu: 155441
-- Data: 12.01.2017



CREATE TABLE adres (
    id              INTEGER
        CONSTRAINT nnc_adres_id NOT NULL,
    ulica           VARCHAR2(50)
        CONSTRAINT nnc_adres_ulica NOT NULL,
    miasto          VARCHAR2(20)
        CONSTRAINT nnc_adres_miasto NOT NULL,
    nr_domu         NUMBER
        CONSTRAINT nnc_adres_nr_domu NOT NULL,
    nr_mieszkania   NUMBER
);

COMMENT ON TABLE adres IS 'tablica adres dla klientów i oddzialow firmy';

ALTER TABLE adres ADD CONSTRAINT adres_mieszkanie CHECK (
    nr_mieszkania > 0
);

ALTER TABLE adres ADD CONSTRAINT adres_dom CHECK (
    nr_domu > 0
);

ALTER TABLE adres ADD CONSTRAINT adres_pk PRIMARY KEY ( id );

CREATE TABLE klasa_wyposazenia (
    id      INTEGER NOT NULL,
    nazwa   VARCHAR2(20) DEFAULT 'S' NOT NULL,
    opis    VARCHAR2(100) DEFAULT 'Small' NOT NULL
);

COMMENT ON TABLE klasa_wyposazenia IS 'klasa s,m,l lub xl,sportowy';

ALTER TABLE klasa_wyposazenia ADD CONSTRAINT klasa_wyposazenia_pk PRIMARY KEY ( id );

ALTER TABLE klasa_wyposazenia ADD CONSTRAINT klasa_wyposazenia_nazwa_un UNIQUE ( nazwa );

CREATE TABLE klient (
    id         INTEGER NOT NULL,
    plec       CHAR(1) NOT NULL,
    imie       VARCHAR2(20) NOT NULL,
    nazwisko   VARCHAR2(50) NOT NULL,
    email      VARCHAR2(50),
    adres_id   INTEGER
        CONSTRAINT nn_adres_fk NOT NULL
);

COMMENT ON TABLE klient IS 'informacje o kliencie';

ALTER TABLE klient ADD CONSTRAINT klient_ck_1 CHECK (
    plec IN (
        'K','k','M','m'
    )
);

ALTER TABLE klient ADD CONSTRAINT klient_ck_2 CHECK (
    email LIKE '%@%.%'
);

ALTER TABLE klient ADD CONSTRAINT klient_pk PRIMARY KEY ( id );

CREATE TABLE kolor (
    id       INTEGER
        CONSTRAINT nnc_kolor_id NOT NULL,
    nazwa    VARCHAR2(50)
        CONSTRAINT nnc_kolor_nazwa NOT NULL,
    odcien   VARCHAR2(50)
        CONSTRAINT nnc_kolor_odcien NOT NULL,
    cena     NUMBER(8,2)
        CONSTRAINT nnc_kolor_cena NOT NULL
);

COMMENT ON TABLE kolor IS 'informacje o kolorze dostepnym dla samochodu';

COMMENT ON COLUMN kolor.odcien IS 'marketingowa nazwa koloru';

ALTER TABLE kolor ADD CONSTRAINT kolor_ck CHECK (
    cena > 0
);

ALTER TABLE kolor ADD CONSTRAINT kolor_pk PRIMARY KEY ( id );

CREATE TABLE marka (
    id      INTEGER NOT NULL,
    nazwa   VARCHAR2(20) NOT NULL,
    kraj    VARCHAR2(20) NOT NULL
);

COMMENT ON TABLE marka IS 'marki produkujace modele samochodow';

ALTER TABLE marka ADD CONSTRAINT marka_pk PRIMARY KEY ( id );

ALTER TABLE marka ADD CONSTRAINT marka_nazwa_un UNIQUE ( nazwa );

CREATE TABLE model (
    id                     INTEGER
        CONSTRAINT nnc_model_model_id NOT NULL,
    nazwa                  VARCHAR2(20)
        CONSTRAINT nnc_model_nazwa NOT NULL,
    marka_id               INTEGER
        CONSTRAINT nnc_model_marka_id NOT NULL,
    rok_produkcji          INTEGER
        CONSTRAINT nnc_model_rok_produkcji NOT NULL,
    klasa_wyposazenia_id   INTEGER DEFAULT 1
        CONSTRAINT nnc_model_klasa_modelu_id NOT NULL,
    cena                   NUMBER(8,2) NOT NULL,
    liczba_drzwi           NUMBER(1) NOT NULL
);

COMMENT ON TABLE model IS 'modele samochodow';

ALTER TABLE model ADD CONSTRAINT model_ck CHECK (
    rok_produkcji > 1900
);

ALTER TABLE model ADD CONSTRAINT model_ckv1 CHECK (
    cena > 0
);

ALTER TABLE model ADD CONSTRAINT model_ck_3 CHECK (
    liczba_drzwi IN (
        2,3,4,5
    )
);

ALTER TABLE model ADD CONSTRAINT model_pk PRIMARY KEY ( id );

CREATE TABLE oddzial (
    id       INTEGER NOT NULL,
    nazwa    VARCHAR2(20) NOT NULL,
    email    VARCHAR2(50) NOT NULL,
    miasto   VARCHAR2(20) NOT NULL
);

COMMENT ON TABLE oddzial IS 'informacje o oddziale sprzedawcy';

ALTER TABLE oddzial ADD CONSTRAINT oddzial_ck_1 CHECK (
    email LIKE '%@%.%'
);

ALTER TABLE oddzial ADD CONSTRAINT oddzial_pk PRIMARY KEY ( id );

ALTER TABLE oddzial ADD CONSTRAINT oddzial_nazwa_un UNIQUE ( nazwa );

CREATE TABLE pakiet_dodatkowy (
    id      INTEGER
        CONSTRAINT nnc_modyfikacja_auta_id NOT NULL,
    nazwa   VARCHAR2(20)
        CONSTRAINT nnc_modyfikacja_auta_nazwa NOT NULL,
    opis    VARCHAR2(300),
    cena    NUMBER(8,2)
        CONSTRAINT nnc_modyfikacja_auta_cena NOT NULL
);

COMMENT ON TABLE pakiet_dodatkowy IS 'informacje o pakeitach dodatkowych dostepnych do dokupienia';

ALTER TABLE pakiet_dodatkowy ADD CONSTRAINT modyfikacja_auta_ck CHECK (
    cena > 0
);

ALTER TABLE pakiet_dodatkowy ADD CONSTRAINT pakiet_dodatkowy_pk PRIMARY KEY ( id );

ALTER TABLE pakiet_dodatkowy ADD CONSTRAINT pakiet_dodatkowy_nazwa_un UNIQUE ( nazwa );

CREATE TABLE pakiet_podstawowy (
    wyposazenie_id         INTEGER NOT NULL,
    klasa_wyposazenia_id   INTEGER NOT NULL
);

COMMENT ON TABLE pakiet_podstawowy IS 'pakiet podstawowy wyposazenia modelu ';

ALTER TABLE pakiet_podstawowy ADD CONSTRAINT pakiet_podstawowy_pk PRIMARY KEY ( wyposazenie_id,klasa_wyposazenia_id );

CREATE TABLE platnosc (
    id                    INTEGER
        CONSTRAINT nnc_platnosc_platnosc_id NOT NULL,
    data_dokonania        DATE DEFAULT SYSDATE
        CONSTRAINT nnc_platnosc_data_dokonania NOT NULL,
    kwota                 NUMBER(8,2)
        CONSTRAINT nnc_platnosc_kwota NOT NULL,
    uwagi_dodatkowe       VARCHAR2(100),
    status_platnosci_id   INTEGER DEFAULT 1
        CONSTRAINT nn_status_platnosci_id NOT NULL,
    rodzaj_platnosci_id   INTEGER DEFAULT 1
        CONSTRAINT nn_rodzaj_platnosci_id NOT NULL,
    klient_id             INTEGER
        CONSTRAINT nnc_platnosc_klient_id NOT NULL,
    zamowienie_id         INTEGER
        CONSTRAINT nn_zamowienie_fk NOT NULL
);

COMMENT ON TABLE platnosc IS 'informacje o platnosciach';

ALTER TABLE platnosc ADD CONSTRAINT platnosc_pk PRIMARY KEY ( id );

CREATE TABLE rodzaj_platnosci (
    id      INTEGER NOT NULL,
    nazwa   VARCHAR2(20) NOT NULL
);

COMMENT ON TABLE rodzaj_platnosci IS 'informacje o rodzaju platnosci: karta,gotowka,przelew,kredyt';

ALTER TABLE rodzaj_platnosci ADD CONSTRAINT rodzaj_platnosci_pk PRIMARY KEY ( id );

ALTER TABLE rodzaj_platnosci ADD CONSTRAINT rodzaj_platnosci_nazwa_un UNIQUE ( nazwa );

CREATE TABLE samochod (
    id                    INTEGER
        CONSTRAINT nnc_samochod_id NOT NULL,
    nr_vin                VARCHAR2(20)
        CONSTRAINT nnc_samochod_nr_vin NOT NULL,
    przejechany_dystans   NUMBER DEFAULT 2 NOT NULL,
    zamowienie_id         INTEGER,
    model_id              INTEGER
        CONSTRAINT nnc_samochod_model_id NOT NULL,
    silnik_id             INTEGER DEFAULT 1
        CONSTRAINT nnc_samochod_silnik_id NOT NULL,
    kolor_id              INTEGER DEFAULT 1 NOT NULL
);

COMMENT ON TABLE samochod IS 'informacje o samochodach';

ALTER TABLE samochod ADD CONSTRAINT samochod_ck CHECK (
    przejechany_dystans >= 0
);

ALTER TABLE samochod ADD CONSTRAINT samochod_pk PRIMARY KEY ( id );

CREATE TABLE silnik (
    id          INTEGER
        CONSTRAINT nnc_silnik_id NOT NULL,
    typ         VARCHAR2(20) DEFAULT 'BENZYNA'
        CONSTRAINT nnc_silnik_typ NOT NULL,
    pojemnosc   NUMBER
        CONSTRAINT nnc_silnik_pojemnosc NOT NULL,
    cena        NUMBER(8,2)
        CONSTRAINT nnc_silnik_cena NOT NULL
);

COMMENT ON TABLE silnik IS 'dostepne modele silnikow';

ALTER TABLE silnik ADD CONSTRAINT silnik_ck CHECK (
    cena > 0
);

ALTER TABLE silnik ADD CONSTRAINT silnik_ck_2 CHECK (
    lower(typ) IN (
        'benzyna','diesel','hybryda'
    )
);

ALTER TABLE silnik ADD CONSTRAINT silnik_pk PRIMARY KEY ( id );

CREATE TABLE sprzedawca (
    id              INTEGER NOT NULL,
    imie            VARCHAR2(20) NOT NULL,
    nazwisko        VARCHAR2(50) NOT NULL,
    email           VARCHAR2(50) DEFAULT 'pracownicy@firma.pl' NOT NULL,
    oddzial_id      INTEGER DEFAULT 1
        CONSTRAINT nn_oddzial NOT NULL,
    stanowisko_id   INTEGER DEFAULT 1 NOT NULL,
    pensja          NUMBER NOT NULL
);

COMMENT ON TABLE sprzedawca IS 'informacje o sprzedawcy ';

ALTER TABLE sprzedawca ADD CONSTRAINT sprzedawca_ck CHECK (
    pensja > 0
);

ALTER TABLE sprzedawca ADD CONSTRAINT sprzedawca_ck_2 CHECK (
    email LIKE '%@%.%'
);

ALTER TABLE sprzedawca ADD CONSTRAINT sprzedawca_pk PRIMARY KEY ( id );

CREATE TABLE stanowisko (
    id      INTEGER NOT NULL,
    nazwa   VARCHAR2(20) NOT NULL
);

COMMENT ON TABLE stanowisko IS 'stanowisko pracownika';

ALTER TABLE stanowisko ADD CONSTRAINT stanowisko_pk PRIMARY KEY ( id );

ALTER TABLE stanowisko ADD CONSTRAINT stanowisko_nazwa_un UNIQUE ( nazwa );

CREATE TABLE status_platnosci (
    id      INTEGER NOT NULL,
    nazwa   VARCHAR2(20) NOT NULL
);

COMMENT ON TABLE status_platnosci IS 'informacje czy platnosc zostala zaksiegowana,nadplata,do zwrotu';

ALTER TABLE status_platnosci ADD CONSTRAINT status_platnosci_pk PRIMARY KEY ( id );

ALTER TABLE status_platnosci ADD CONSTRAINT status_platnosci_nazwa_un UNIQUE ( nazwa );

CREATE TABLE status_zamowienia (
    id      INTEGER NOT NULL,
    nazwa   VARCHAR2(20) NOT NULL
);

COMMENT ON TABLE status_zamowienia IS 'informacja czy zamowienie jest w trakcie realizacji,do obioru lub odebrane';

ALTER TABLE status_zamowienia ADD CONSTRAINT status_zamowienia_pk PRIMARY KEY ( id );

ALTER TABLE status_zamowienia ADD CONSTRAINT status_zamowienia_nazwa_un UNIQUE ( nazwa );

CREATE TABLE ubezpieczenie (
    id                  INTEGER
        CONSTRAINT nnc_ubezpieczenie_id NOT NULL,
    cena                NUMBER(8,2)
        CONSTRAINT nnc_ubezpieczenie_cena NOT NULL,
    data_zawarcia       DATE DEFAULT SYSDATE
        CONSTRAINT nnc_data_zawarcia NOT NULL,
    poczatek            DATE DEFAULT SYSDATE
        CONSTRAINT nnc_ubezpieczenie_poczatek NOT NULL,
    koniec              DATE
        CONSTRAINT nnc_ubezpieczenie_koniec NOT NULL,
    ubezpieczyciel_id   INTEGER
        CONSTRAINT nnc_ubezpieczyciel_id NOT NULL
);

COMMENT ON TABLE ubezpieczenie IS 'informacje o ubezpieczeniu';

ALTER TABLE ubezpieczenie ADD CONSTRAINT ubezpieczenie_ck CHECK (
    cena > 0
);

ALTER TABLE ubezpieczenie ADD CONSTRAINT ubezpieczenie_ckv22 CHECK (
    poczatek >= data_zawarcia
);

ALTER TABLE ubezpieczenie ADD CONSTRAINT ubezpieczenie_ckv32 CHECK (
    koniec <= add_months(poczatek,12)
);

ALTER TABLE ubezpieczenie ADD CONSTRAINT ubezpieczenie_pk PRIMARY KEY ( id );

CREATE TABLE ubezpieczyciel (
    id      INTEGER NOT NULL,
    nazwa   VARCHAR2(20) NOT NULL
);

COMMENT ON TABLE ubezpieczyciel IS 'informacje o ubezpieczycielu';

ALTER TABLE ubezpieczyciel ADD CONSTRAINT ubezpieczyciel_pk PRIMARY KEY ( id );

ALTER TABLE ubezpieczyciel ADD CONSTRAINT ubezpieczyciel_nazwa_un UNIQUE ( nazwa );

CREATE TABLE upust (
    id            INTEGER
        CONSTRAINT nnc_upust_id NOT NULL,
    nazwa         VARCHAR2(50)
        CONSTRAINT nnc_upust_nazwa NOT NULL,
    wysokosc      NUMBER
        CONSTRAINT nnc_upust_wysokosc NOT NULL,
    data_start    DATE
        CONSTRAINT nnc_upust_data_start NOT NULL,
    data_koniec   DATE
        CONSTRAINT nnc_upust_data_koniec NOT NULL,
    opis          VARCHAR2(100)
);

COMMENT ON TABLE upust IS 'inforamcje o upstach cenowych stsowanych przez oddzial';

ALTER TABLE upust ADD CONSTRAINT upust_ck CHECK (
        wysokosc >= 0
    AND
        wysokosc <= 100
);

ALTER TABLE upust ADD CONSTRAINT upust_ck_2 CHECK (
    data_koniec > data_start
);

ALTER TABLE upust ADD CONSTRAINT upust_pk PRIMARY KEY ( id );

CREATE TABLE upust_oddzialu (
    oddzial_id   INTEGER NOT NULL,
    upust_id     INTEGER NOT NULL
);

COMMENT ON TABLE upust_oddzialu IS 'tablica pokazuje wybrane upusty jakie posiada oddzial';

ALTER TABLE upust_oddzialu ADD CONSTRAINT upust_oddzialu_pk PRIMARY KEY ( oddzial_id,upust_id );

CREATE TABLE uslugi_dodatkowe (
    id      INTEGER
        CONSTRAINT nnc_uslugi_dodatkowe_id NOT NULL,
    nazwa   VARCHAR2(30)
        CONSTRAINT nnc_uslugi_dodatkowe_nazwa NOT NULL,
    cena    NUMBER(8,2)
        CONSTRAINT nnc_uslugi_dodatkowe_cena NOT NULL
);

COMMENT ON TABLE uslugi_dodatkowe IS 'informacje o uslugach dodatkowych: pakiet na myjnie,przechowywanie opon itp';

ALTER TABLE uslugi_dodatkowe ADD CONSTRAINT uslugi_dodatkowe_ck CHECK (
    cena > 0
);

ALTER TABLE uslugi_dodatkowe ADD CONSTRAINT uslugi_dodatkowe_pk PRIMARY KEY ( id );

CREATE TABLE wybrane_pakiety (
    samochod_id           INTEGER NOT NULL,
    pakiet_dodatkowy_id   INTEGER NOT NULL
);

COMMENT ON TABLE wybrane_pakiety IS 'informacja o wybranych pakietch dodatkowychd dla konkretnego samochodu';

ALTER TABLE wybrane_pakiety ADD CONSTRAINT relation_56_pk PRIMARY KEY ( samochod_id,pakiet_dodatkowy_id );

CREATE TABLE wybrane_uslugi (
    zamowienie_id         INTEGER NOT NULL,
    uslugi_dodatkowe_id   INTEGER NOT NULL
);

COMMENT ON TABLE wybrane_uslugi IS 'wybrane uslugi dodatkowe do zamowienia';

ALTER TABLE wybrane_uslugi ADD CONSTRAINT wybrane_dodatki_pk PRIMARY KEY ( zamowienie_id,uslugi_dodatkowe_id );

CREATE TABLE wyposazenie (
    id      INTEGER
        CONSTRAINT nnc_wyposazenie_id NOT NULL,
    nazwa   VARCHAR2(100)
        CONSTRAINT nnc_wyposazenie_nazwa NOT NULL
);

COMMENT ON TABLE wyposazenie IS 'wyposazenie samochodu zarowno podstawowe jak i dodatkowe';

ALTER TABLE wyposazenie ADD CONSTRAINT wyposazenie_pk PRIMARY KEY ( id );

CREATE TABLE zamowienie (
    id                     INTEGER
        CONSTRAINT nnc_zamowienie_zamowienie_id NOT NULL,
    nr_umowy               VARCHAR2(20)
        CONSTRAINT nnc_zamowienie_nr_umowy NOT NULL,
    data_zawarcia          DATE
        CONSTRAINT nnc_zamowienie_data_zlozenia NOT NULL,
    data_odbioru           DATE
        CONSTRAINT nnc_zamowienie_data_odbioru NOT NULL,
    klient_id              INTEGER
        CONSTRAINT nnc_zamowienie_klient_id NOT NULL,
    sprzedawca_id          INTEGER
        CONSTRAINT nnc_zamowienie_sprzedawca_id NOT NULL,
    status_zamowienia_id   INTEGER DEFAULT 1
        CONSTRAINT nn_status_zamowienia_fk NOT NULL,
    ubezpieczenie_id       INTEGER
        CONSTRAINT nn_ubezpieczenie_fk NOT NULL
);

COMMENT ON TABLE zamowienie IS 'informacje o zamowieniu skladanym przez klienta';

ALTER TABLE zamowienie ADD CONSTRAINT zamowienie_ck CHECK (
    data_odbioru >= data_zawarcia
);

ALTER TABLE zamowienie ADD CONSTRAINT zamowienie_ck_3 CHECK (
    nr_umowy LIKE '%/%/%'
);

ALTER TABLE zamowienie ADD CONSTRAINT zamowienie_pk PRIMARY KEY ( id );

ALTER TABLE klient ADD CONSTRAINT klient_adres_fk FOREIGN KEY ( adres_id )
    REFERENCES adres ( id );

ALTER TABLE model ADD CONSTRAINT model_klasa_wyposazenia_fk FOREIGN KEY ( klasa_wyposazenia_id )
    REFERENCES klasa_wyposazenia ( id );

ALTER TABLE model ADD CONSTRAINT model_marka_fk FOREIGN KEY ( marka_id )
    REFERENCES marka ( id );

ALTER TABLE wybrane_pakiety ADD CONSTRAINT pakiet_samochodu FOREIGN KEY ( samochod_id )
    REFERENCES samochod ( id )
        ON DELETE CASCADE;

ALTER TABLE platnosc ADD CONSTRAINT platnosc_klient_fk FOREIGN KEY ( klient_id )
    REFERENCES klient ( id );

ALTER TABLE platnosc ADD CONSTRAINT platnosc_rodzaj_platnosci_fk FOREIGN KEY ( rodzaj_platnosci_id )
    REFERENCES rodzaj_platnosci ( id );

ALTER TABLE platnosc ADD CONSTRAINT platnosc_status_platnosci_fk FOREIGN KEY ( status_platnosci_id )
    REFERENCES status_platnosci ( id );

ALTER TABLE platnosc ADD CONSTRAINT platnosc_zamowienie_fk FOREIGN KEY ( zamowienie_id )
    REFERENCES zamowienie ( id )
        ON DELETE CASCADE;

ALTER TABLE pakiet_podstawowy ADD CONSTRAINT podstawowe_wyposazenie_fk FOREIGN KEY ( wyposazenie_id )
    REFERENCES wyposazenie ( id )
        ON DELETE CASCADE;

ALTER TABLE pakiet_podstawowy ADD CONSTRAINT podstawowe_wyposazenie_fkv2 FOREIGN KEY ( klasa_wyposazenia_id )
    REFERENCES klasa_wyposazenia ( id )
        ON DELETE CASCADE;

ALTER TABLE samochod ADD CONSTRAINT samochod_kolor_fk FOREIGN KEY ( kolor_id )
    REFERENCES kolor ( id );

ALTER TABLE samochod ADD CONSTRAINT samochod_model_fk FOREIGN KEY ( model_id )
    REFERENCES model ( id );

ALTER TABLE samochod ADD CONSTRAINT samochod_silnik_fk FOREIGN KEY ( silnik_id )
    REFERENCES silnik ( id );

ALTER TABLE samochod ADD CONSTRAINT samochod_zamowienie_fk FOREIGN KEY ( zamowienie_id )
    REFERENCES zamowienie ( id );

ALTER TABLE sprzedawca ADD CONSTRAINT sprzedawca_oddzial_fk FOREIGN KEY ( oddzial_id )
    REFERENCES oddzial ( id );

ALTER TABLE sprzedawca ADD CONSTRAINT sprzedawca_stanowisko_fk FOREIGN KEY ( stanowisko_id )
    REFERENCES stanowisko ( id );

ALTER TABLE zamowienie ADD CONSTRAINT status_zamowienia_fk FOREIGN KEY ( status_zamowienia_id )
    REFERENCES status_zamowienia ( id );

ALTER TABLE ubezpieczenie ADD CONSTRAINT ubezpieczyciel_fk FOREIGN KEY ( ubezpieczyciel_id )
    REFERENCES ubezpieczyciel ( id );

ALTER TABLE upust_oddzialu ADD CONSTRAINT upust_oddzialu_oddzial_fk FOREIGN KEY ( oddzial_id )
    REFERENCES oddzial ( id )
        ON DELETE CASCADE;

ALTER TABLE upust_oddzialu ADD CONSTRAINT upust_oddzialu_upust_fk FOREIGN KEY ( upust_id )
    REFERENCES upust ( id )
        ON DELETE CASCADE;

ALTER TABLE wybrane_uslugi ADD CONSTRAINT wybrane_dodatki_zamowienie_fk FOREIGN KEY ( zamowienie_id )
    REFERENCES zamowienie ( id )
        ON DELETE CASCADE;

ALTER TABLE wybrane_uslugi ADD CONSTRAINT wybrane_uslugi_dodatkowe_fk FOREIGN KEY ( uslugi_dodatkowe_id )
    REFERENCES uslugi_dodatkowe ( id )
        ON DELETE CASCADE;

ALTER TABLE wybrane_pakiety ADD CONSTRAINT wybrany_dodatek FOREIGN KEY ( pakiet_dodatkowy_id )
    REFERENCES pakiet_dodatkowy ( id )
        ON DELETE CASCADE;

ALTER TABLE zamowienie ADD CONSTRAINT zamowienie_klient_fk FOREIGN KEY ( klient_id )
    REFERENCES klient ( id );

ALTER TABLE zamowienie ADD CONSTRAINT zamowienie_sprzedawca_fk FOREIGN KEY ( sprzedawca_id )
    REFERENCES sprzedawca ( id );

ALTER TABLE zamowienie ADD CONSTRAINT zamowienie_ubezpieczenie_fk FOREIGN KEY ( ubezpieczenie_id )
    REFERENCES ubezpieczenie ( id );

CREATE SEQUENCE adres_id_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER adres_id_trg BEFORE
    INSERT ON adres
    FOR EACH ROW
    WHEN (
        new.id IS NULL
    )
BEGIN
    :new.id := adres_id_seq.nextval;
END;
/

CREATE SEQUENCE klasa_wyposazenia_id_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER klasa_wyposazenia_id_trg BEFORE
    INSERT ON klasa_wyposazenia
    FOR EACH ROW
    WHEN (
        new.id IS NULL
    )
BEGIN
    :new.id := klasa_wyposazenia_id_seq.nextval;
END;
/

CREATE SEQUENCE klient_id_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER klient_id_trg BEFORE
    INSERT ON klient
    FOR EACH ROW
    WHEN (
        new.id IS NULL
    )
BEGIN
    :new.id := klient_id_seq.nextval;
END;
/

CREATE SEQUENCE kolor_id_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER kolor_id_trg BEFORE
    INSERT ON kolor
    FOR EACH ROW
    WHEN (
        new.id IS NULL
    )
BEGIN
    :new.id := kolor_id_seq.nextval;
END;
/

CREATE SEQUENCE marka_id_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER marka_id_trg BEFORE
    INSERT ON marka
    FOR EACH ROW
    WHEN (
        new.id IS NULL
    )
BEGIN
    :new.id := marka_id_seq.nextval;
END;
/

CREATE SEQUENCE model_id_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER model_id_trg BEFORE
    INSERT ON model
    FOR EACH ROW
    WHEN (
        new.id IS NULL
    )
BEGIN
    :new.id := model_id_seq.nextval;
END;
/

CREATE SEQUENCE oddzial_id_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER oddzial_id_trg BEFORE
    INSERT ON oddzial
    FOR EACH ROW
    WHEN (
        new.id IS NULL
    )
BEGIN
    :new.id := oddzial_id_seq.nextval;
END;
/

CREATE SEQUENCE pakiet_dodatkowy_id_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER pakiet_dodatkowy_id_trg BEFORE
    INSERT ON pakiet_dodatkowy
    FOR EACH ROW
    WHEN (
        new.id IS NULL
    )
BEGIN
    :new.id := pakiet_dodatkowy_id_seq.nextval;
END;
/

CREATE SEQUENCE platnosc_id_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER platnosc_id_trg BEFORE
    INSERT ON platnosc
    FOR EACH ROW
    WHEN (
        new.id IS NULL
    )
BEGIN
    :new.id := platnosc_id_seq.nextval;
END;
/

CREATE SEQUENCE rodzaj_platnosci_id_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER rodzaj_platnosci_id_trg BEFORE
    INSERT ON rodzaj_platnosci
    FOR EACH ROW
    WHEN (
        new.id IS NULL
    )
BEGIN
    :new.id := rodzaj_platnosci_id_seq.nextval;
END;
/

CREATE SEQUENCE samochod_id_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER samochod_id_trg BEFORE
    INSERT ON samochod
    FOR EACH ROW
    WHEN (
        new.id IS NULL
    )
BEGIN
    :new.id := samochod_id_seq.nextval;
END;
/

CREATE SEQUENCE silnik_id_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER silnik_id_trg BEFORE
    INSERT ON silnik
    FOR EACH ROW
    WHEN (
        new.id IS NULL
    )
BEGIN
    :new.id := silnik_id_seq.nextval;
END;
/

CREATE SEQUENCE sprzedawca_id_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER sprzedawca_id_trg BEFORE
    INSERT ON sprzedawca
    FOR EACH ROW
    WHEN (
        new.id IS NULL
    )
BEGIN
    :new.id := sprzedawca_id_seq.nextval;
END;
/

CREATE SEQUENCE stanowisko_id_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER stanowisko_id_trg BEFORE
    INSERT ON stanowisko
    FOR EACH ROW
    WHEN (
        new.id IS NULL
    )
BEGIN
    :new.id := stanowisko_id_seq.nextval;
END;
/

CREATE SEQUENCE status_platnosci_id_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER status_platnosci_id_trg BEFORE
    INSERT ON status_platnosci
    FOR EACH ROW
    WHEN (
        new.id IS NULL
    )
BEGIN
    :new.id := status_platnosci_id_seq.nextval;
END;
/

CREATE SEQUENCE status_zamowienia_id_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER status_zamowienia_id_trg BEFORE
    INSERT ON status_zamowienia
    FOR EACH ROW
    WHEN (
        new.id IS NULL
    )
BEGIN
    :new.id := status_zamowienia_id_seq.nextval;
END;
/

CREATE SEQUENCE ubezpieczenie_id_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER ubezpieczenie_id_trg BEFORE
    INSERT ON ubezpieczenie
    FOR EACH ROW
    WHEN (
        new.id IS NULL
    )
BEGIN
    :new.id := ubezpieczenie_id_seq.nextval;
END;
/

CREATE SEQUENCE ubezpieczyciel_id_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER ubezpieczyciel_id_trg BEFORE
    INSERT ON ubezpieczyciel
    FOR EACH ROW
    WHEN (
        new.id IS NULL
    )
BEGIN
    :new.id := ubezpieczyciel_id_seq.nextval;
END;
/

CREATE SEQUENCE upust_id_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER upust_id_trg BEFORE
    INSERT ON upust
    FOR EACH ROW
    WHEN (
        new.id IS NULL
    )
BEGIN
    :new.id := upust_id_seq.nextval;
END;
/

CREATE SEQUENCE uslugi_dodatkowe_id_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER uslugi_dodatkowe_id_trg BEFORE
    INSERT ON uslugi_dodatkowe
    FOR EACH ROW
    WHEN (
        new.id IS NULL
    )
BEGIN
    :new.id := uslugi_dodatkowe_id_seq.nextval;
END;
/

CREATE SEQUENCE wyposazenie_id_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER wyposazenie_id_trg BEFORE
    INSERT ON wyposazenie
    FOR EACH ROW
    WHEN (
        new.id IS NULL
    )
BEGIN
    :new.id := wyposazenie_id_seq.nextval;
END;
/

CREATE SEQUENCE zamowienie_id_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER zamowienie_id_trg BEFORE
    INSERT ON zamowienie
    FOR EACH ROW
    WHEN (
        new.id IS NULL
    )
BEGIN
    :new.id := zamowienie_id_seq.nextval;
END;
/



-- Oracle SQL Developer Data Modeler Summary Report: 
-- 
-- CREATE TABLE                            26
-- CREATE INDEX                             0
-- ALTER TABLE                             84
-- CREATE VIEW                              0
-- ALTER VIEW                               0
-- CREATE PACKAGE                           0
-- CREATE PACKAGE BODY                      0
-- CREATE PROCEDURE                         0
-- CREATE FUNCTION                          0
-- CREATE TRIGGER                          22
-- ALTER TRIGGER                            0
-- CREATE COLLECTION TYPE                   0
-- CREATE STRUCTURED TYPE                   0
-- CREATE STRUCTURED TYPE BODY              0
-- CREATE CLUSTER                           0
-- CREATE CONTEXT                           0
-- CREATE DATABASE                          0
-- CREATE DIMENSION                         0
-- CREATE DIRECTORY                         0
-- CREATE DISK GROUP                        0
-- CREATE ROLE                              0
-- CREATE ROLLBACK SEGMENT                  0
-- CREATE SEQUENCE                         22
-- CREATE MATERIALIZED VIEW                 0
-- CREATE SYNONYM                           0
-- CREATE TABLESPACE                        0
-- CREATE USER                              0
-- 
-- DROP TABLESPACE                          0
-- DROP DATABASE                            0
-- 
-- REDACTION POLICY                         0
-- 
-- ORDS DROP SCHEMA                         0
-- ORDS ENABLE SCHEMA                       0
-- ORDS ENABLE OBJECT                       0
-- 
-- ERRORS                                   0
-- WARNINGS                                 0
